wda_clean, bg_clean))
all_vn = normalize(clean_all)
################################################################################
#separate by three primary sites
################################################################################
meta3 = meta(clean_big3)
ala3 = clean_big3[meta3$Species == "alaskensis"]
oct3 = clean_big3[meta3$Species == "octopetala"]
big3.no_hybrids = combine(ala3, oct3)
vn_big3.no_hybrids = normalize(big3.no_hybrids)
################################################################################
#Save Data
################################################################################
#Save Cleaned Spectra
saveRDS(tm_clean, "Clean-up/Clean_spectra/tm_clean.rds")
saveRDS(bg_clean, "Clean-up/Clean_spectra/bg_clean.rds")
saveRDS(es_clean, "Clean-up/Clean_spectra/es_clean.rds")
saveRDS(mdb_clean, "Clean-up/Clean_spectra/mdb_clean.rds")
saveRDS(wda_clean, "Clean-up/Clean_spectra/wda_clean.rds")
saveRDS(wdb_clean, "Clean-up/Clean_spectra/wdb_clean.rds")
saveRDS(clean_all, "Clean-up/Clean_spectra/clean_all.rds")
saveRDS(clean_big3, "Clean-up/Clean_spectra/clean_big3.rds")
saveRDS(big3.no_hybrids, "Clean-up/Clean_spectra/big3.no_hybrids.rds")
#Save Vector Normalized Spectra
saveRDS(tm_vn, "Clean-up/Vector_normalized/tm_vn.rds")
saveRDS(bg_vn, "Clean-up/Vector_normalized/bg_vn.rds")
saveRDS(es_vn, "Clean-up/Vector_normalized/es_vn.rds")
saveRDS(mdb_vn, "Clean-up/Vector_normalized/mdb_vn.rds")
saveRDS(wda_vn, "Clean-up/Vector_normalized/wda_vn.rds")
saveRDS(wdb_vn, "Clean-up/Vector_normalized/wdb_vn.rds")
saveRDS(all_vn, "Clean-up/Vector_normalized/all_vn.rds")
saveRDS(vn_big3, "Clean-up/Vector_normalized/vn_big3.rds")
saveRDS(vn_big3.no_hybrids, "Clean-up/Vector_normalized/vn_big3.no_hybrids.rds")
################################################################################
################################################################################
#Wet Scans
################################################################################
#Eagle Summit
es_w_path = "Scans_raw/Wet Scans/es_wet"
es_w_meta = "Scans_raw/Wet Scans/es_wet/es_pops_wet.csv"
es_w_clean1 = thebigclean(es_w_path, es_w_meta)
es_w_clean2 = es_w_clean1[!meta(es_w_clean1)$Clone == "Yes",]
es_w_clean = es_w_clean2[!meta(es_w_clean2)$Notes == "not sequenced",]
vn_es_w = normalize(es_w_clean)
#Wickersham Dome A
wda_w_path = "Scans_raw/Wet Scans/wda_wet"
wda_w_meta = "Scans_raw/Wet Scans/wda_wet/wda_pops_wet.csv"
wda_w_clean = thebigclean(wda_w_path, wda_w_meta)
vn_wda_w = normalize(wda_w_clean)
#Wickerhamd Dome B
wdb_w_path = "Scans_raw/Wet Scans/wdb_wet"
wdb_w_meta = "Scans_raw/Wet Scans/wdb_wet/wdb_pops_wet.csv"
wdb_w_clean = thebigclean(wdb_w_path, wdb_w_meta)
vn_wdb_w = normalize(wdb_w_clean)
#all wet
Clean_all_w = Reduce(combine, list(wdb_w_clean, wda_w_clean, es_w_clean))
vn_all_w = normalize(Clean_all_w)
saveRDS(Clean_all_w, "Clean-up/Clean_spectra/clean_all_w.rds")
saveRDS(vn_all_w, "Clean-up/Vector_normalized/vn_all_w.rds")
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all
################################################################################
#data
spec_all = readRDS("Clean-up/Vector_normalized/all_vn.rds")
meta(spec_all)
spec_all = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_all = spec_all[meta(spec_all)$Location == c("Eagle Summit", "Wickersham Dome B",
"Twelve Mile"),]
spec_all = spec_all[meta(spec_all)$Location == "Eagle Summit",]
spec_all = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_es = spec_all[meta(spec_all)$Location == "Eagle Summit",]
spec_wdb = spec_all[meta(spec_all)$Location == "Wickersham Dome B",]
spec_tm = spec_all[meta(spec_all)$Location == "Twelve Mile",]
spec_all = Reduce(combine, list(spec_es, spec_wdb, spec_tm))
spec_all
meta(spec_all)
names(spec_all) = meta(spec_all)$Species_ID
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
rownames(spec_mat) = seq(nrow(spec_mat))
#determine number of components to use
plsda.fit = plsda(spec_mat, resp, ncomp = 30)
perf.plsda = perf(plsda.fit, validation = "Mfold", folds = 5,
progressBar = TRUE, auc = TRUE, nrepeat = 50)
perf.plot_species = plot(perf.plsda, col = color.mixo(1:3), sd = TRUE,
legend.position = "horizontal")
library(mixOmics)
library(spectrolab)
library(plotrix)
library(rgl)
library(grDevices)
names(spec_all) = meta(spec_all)$Species_ID
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
rownames(spec_mat) = seq(nrow(spec_mat))
#determine number of components to use
plsda.fit = plsda(spec_mat, resp, ncomp = 30)
perf.plsda = perf(plsda.fit, validation = "Mfold", folds = 5,
progressBar = TRUE, auc = TRUE, nrepeat = 50)
perf.plot_species = plot(perf.plsda, col = color.mixo(1:3), sd = TRUE,
legend.position = "horizontal")
unique(meta(spec_all)$Location)
names(spec_all) = meta(spec_all)$Species_ID
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
rownames(spec_mat) = seq(nrow(spec_mat))
#determine number of components to use
plsda.fit = plsda(spec_mat, resp, ncomp = 30)
perf.plsda = perf(plsda.fit, validation = "Mfold", folds = 5,
progressBar = TRUE, auc = TRUE, nrepeat = 50)
perf.plot_species = plot(perf.plsda, col = color.mixo(1:3), sd = TRUE,
legend.position = "horizontal")
set.seed(25)
samp <- sample(1:3, nrow(spec_mat), replace = TRUE)
# 1/3 of the data will compose the test set
test <- which(samp == 1)
# rest will compose the training set
train <- setdiff(1:nrow(spec_mat), test)
## For PLS-DA, train the model
plsda.train <- plsda(spec_mat[train, ], resp[train], ncomp = 30)
# then predict
test.predict <- predict(plsda.train, spec_mat[test, ], dist = "max.dist")
# store prediction for the 4th component
prediction <- test.predict$class$max.dist[,17]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
plsda.train <- plsda(spec_mat[train, ], resp[train], ncomp = 30)
# then predict
test.predict <- predict(plsda.train, spec_mat[test, ], dist = "max.dist")
# store prediction for the 4th component
prediction <- test.predict$class$max.dist[,21]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
prediction <- test.predict$class$max.dist[,26]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
prediction <- test.predict$class$max.dist[,25]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
prediction <- test.predict$class$max.dist[,26]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
prediction <- test.predict$class$max.dist[,26]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
#plot
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1,
show.values = TRUE,
axes = FALSE,
xlab = "",
ylab = "",
vcex = 2,
vcol = "black",
extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)
View(confusion.mat)
test.predict$predict
plsda.fit$names
prediction
prediction["DX"]
resp[test]
h = resp[test]
h
dx = h == "DX"
dx
dx == TRUE
resp[test == "DX"]
?predict
test.predict$predict
gregexpr(pattern = "DX", h)
library(stringr)
str_locate_all(pattern ='DX', h)
h
lapply(strsplit(h, ''), function(h) which(h == 'DX'))
which(strsplit(h, "")[[1]]=="DX")
str_locate_all(pattern ='DX', h)
prediction
test
test[33]
test[c(33,34)]
test[c(33,34,35,76,78,79,83,85,132,133)]
confusion.mat['DX']
confusion.mat[,3]
prediction <- test.predict$class$max.dist[,26]
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1,
show.values = TRUE,
axes = FALSE,
xlab = "",
ylab = "",
vcex = 2,
vcol = "black",
extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)
confusion.mat[3,]
str_locate_all(pattern ='DX', prediction)
h = resp[test]
str_locate_all(pattern ='DX', h)
a = c(33,34,35,76,77,78,79,83,84,85,132,133,134)
predict[a]
prediction[a]
pred.hyb = c(81,83,84,217,221,223,225,251,252,253,373,377,380)
length(pred.hyb)
hybspec = spec_all[pred.hyb,]
hybspec
meta(hybspec)
prediction[c]
h = c(76,77,78,84,85)
prediction[h]
hspec = c(217,221,223,252,253)
a = c(33,34,35,76,77,78,79,83,84,85,132,133,134)
prediction[a]
aspec = c(81,225,251,377)
ospec = c(83,84,373,380)
hspec = c(217,221,223,252,253)
pred.as.hyb = spec_all[hspec,]
DA.pred.hyb = pred.as.hyb[meta(pred.as.hyb)$DA]
pred.hyb.data = meta(pred.as.hyb)
pred.hyb.data$DA
pred.hyb.DA = meta(pred.as.hyb)$DA
pred.as.ala = spec_all[aspec,]
pred.ala.DA = meta(pred.as.hyb)$DA
pred.oct.DA = meta(pred.as.oct)$DA
pred.as.oct = spec_all[ospec,]
pred.oct.DA = meta(pred.as.oct)$DA
pred.hyb.DA
pred.ala.DA
pred.oct.DA
aspec = c(81,225,251,377)
pred.as.ala = spec_all[aspec,]
pred.ala.DA = meta(pred.as.hyb)$DA
pred.ala.DA = meta(pred.as.ala)$DA
pred.ala.DA
plot(pred.oct.DA)
plot(pred.ala.DA)
plot(pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(pred.oct.DA, type = 'p', pch = 16, cex = 1.2, col = "red")
points(pred.ala.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
abline(h = .5, lty = 2, lwd = 1)
plot(pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(pred.ala.DA, type = 'p', pch = 16, cex = 1.2, col = "blue")
abline(h = .5, lty = 2, lwd = 1)
plot(pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "blue")
abline(h = .5, lty = 2, lwd = 1)
plot(y = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(y = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "blue")
abline(v = .5, lty = 2, lwd = 1)
plot(x = c(1:5), y = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(x = c(1:4), y = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(x = c(1:4), y = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "blue")
abline(v = .5, lty = 2, lwd = 1)
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "blue")
abline(v = .5, lty = 2, lwd = 1)
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 2,
ylab = "DA", xlab = "Sample",
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "red")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "blue")
abline(v = .5, lty = 2, lwd = 1)
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 2,
ylab = "Sample", xlab = "DA", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "DA", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "DA", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(4, 4, 3, 4), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "DA", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(4, 4, 3, 1), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "DA", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(4, 4, 3, 1), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "Proportion of DA ancestry", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 16, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 16, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(4, 4, 3, 1), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "Proportion of DA ancestry", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 15, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 17, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = 16, col = c("black", "blue", "orange"))
par(mar = c(4, 4, 3, 1), oma = c(2, 4, 3, 2))
plot(y = c(1:5), x = pred.hyb.DA, type = 'p', pch = 16, col = 'black', cex = 1.2,
ylab = "Sample", xlab = "Proportion of DA ancestry", xlim = c(.3,.7),
main = "Ancestry from Alaskensis - samples predicted as hybrids")
points(y = c(1:4), x = pred.oct.DA, type = 'p', pch = 15, cex = 1.5, col = "blue")
points(y = c(1:4), x = pred.ala.DA, type = 'p', pch = 17, cex = 1.0, col = "orange")
abline(v = .5, lty = 2, lwd = 1)
legend("topright", legend = c("Predicted DX", "Predicted DO", "Predicted DA"),
pch = c(16,15,17), col = c("black", "blue", "orange"))
library(tidyverse)
library(caret)
library(pls)
library(spectrolab)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
all.df = as.data.frame(spectra)
all.m = as.matrix(spectra)
all.m = as.matrix(spectra)
all.m1 = cbind( LMA = all.df$DA, all.m)
all.m2 = cbind(Location = as.factor(all.df$Location), all.m1)
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
all.df = as.data.frame(spectra)
all.m = as.matrix(spectra)
all.m1 = cbind( LMA = all.df$DA, all.m)
all.m2 = cbind(Location = as.factor(all.df$Location), all.m1)
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
all.df = as.data.frame(spectra)
all.m = as.matrix(spectra)
all.m1 = cbind(DA = all.df$DA, all.m)
all.m2 = cbind(Location = as.factor(all.df$Location), all.m1)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spectra.m = cbind(DA = spectra.df$DA, spectra.m)
spectra.m = cbind(Location = as.factor(spectra.df$Location), spectra.m)
?createDataPartition
set.seed(12)
training.samples <-
createDataPartition(spectra.m[,"DA"], p = 0.6, list = FALSE)
train.data  <- spectra.m[training.samples, ]
test.data <- spectra.m3[-training.samples, ]
################################################################################
#PLS R - all
################################################################################
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 20),
tuneLength = 20
)
# Plot model RMSE vs different values of components
plot(model)
set.seed(12)
training.samples <-
createDataPartition(spectra.m[,"DA"], p = 0.6, list = FALSE)
train.data  <- spectra.m[training.samples, ]
test.data <- spectra.m[-training.samples, ]
################################################################################
#PLS R - all
################################################################################
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 20),
tuneLength = 20
)
?train
?trainControl
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 20
)
# Plot model RMSE vs different values of components
plot(model)
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 30
)
# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune
summary(model$finalModel)
predictions <- model %>% predict(test.data)
# Model performance metrics
data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
results = data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
write.csv(results, "Figures/DA_plsr.csv")
