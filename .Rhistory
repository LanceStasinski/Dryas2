View(do_spec)
do_tree = cut_tree(do_spec)
View(do_tree)
do.dist = as.dist(as.matrix(dist(do_spec, method = "manhattan",
diag = T, upper = T)))
do.tree = as.dist(do_tree)
vegan::mantel(do.dist, do.tree, method = "spearman",
permutations = 9999)
library(spectrolab)
library(ape)
library(phytools)
library(vegan)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Distance matrix
################################################################################
#spectra
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "DX",]
spec_all = normalize(spec_all)
spec.mean = aggregate(spec_all,
by = meta(spec_all)$Name,
mean, try_keep_txt(mean))
spec.mean = as.matrix(spec.mean)
#change row names
meta_new = read.csv("mean_meta_new.csv", stringsAsFactors = F)
rownames(spec.mean) <- meta_new[, "genetic_name"]
#Genetic distance matrix
tree = read.tree(file = "new_tree.tre")
tiplabels(tree)
tree.dist = cophenetic(tree)
View(tree.dist)
Make sure both matrices have same sample IDs
gene.ID = colnames(tree.dist)
spec.ID = rownames(spec.mean)
remove.gene = setdiff(gene.ID, spec.ID)
remove.spec = setdiff(spec.ID, gene.ID)
tree.dist = tree.dist[!rownames(tree.dist) %in% remove.gene, ]
tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.gene]
spec.mean = spec.mean[!rownames(spec.mean) == "tmi43_DA",]
#reorder spec matrix to match order of genetic matrix
spec.mean = spec.mean[row.names(tree.dist),,drop = F]
breakdown = function(site){
place = meta_new[meta_new$Location == site,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
bg = mantel_by_location("Bison Gulch")
es = mantel_by_location("Eagle Summit")
md = mantel_by_location("Murphy Dome B")
tm = mantel_by_location("Twelve Mile")
wda = mantel_by_location("Wickersham Dome A")
wdb = mantel_by_location("Wickersham Dome B")
bg
es
md
tm
wda
wdb
spec.dist = as.matrix(dist(spec.mean,
method = "manhattan",
diag = T, upper = T))
#Mantel test
spec.dist2 = as.dist(spec.dist)
tree.dist2 = as.dist(tree.dist)
mtest = vegan::mantel(spec.dist2, tree.dist2, method = "spearman",
permutations = 9999)
mtest
breakdown = function(species){
place = meta_new[meta_new$Species_ID == species,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
mantel_by_species = function(species){
place = breakdown(species)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
daj = mantel_by_species("DO")
dak = mantel_by_species("DA")
daj
dak
library(spectrolab)
library(caret)
library(dplyr)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$Species_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
?caret::createDataPartition
nrow(spec_df)
.8*700
#testing and training sets
training = spec_df[sample(nrow(spec_df), 560),]
training <- spec_df[-training,]
training <- spec_df[-training,]
str(training)
nrow(training)
View(training)
training = spec_df[sample(nrow(spec_df), 560),]
testing <- spec_df[-training,]
testing <- spec_df[!training,]
test.rows = setdiff(rownames(spec_df), rownames(training))
test.rows = setdiff(spec_df, training)
View(test.rows)
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$Species_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
#testing and training sets
training = spec_df[sample(nrow(spec_df), 560),]
testing = setdiff(spec_df, training)
install.packages("randomForest")
library(randomForest)
?randomForest
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$Species_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
View(spec_df)
randomForest(x = spec_df, ntree= 2000, proximity = T)
rf = randomForest(x = spec_df, ntree= 2000, proximity = T)
spec_df$Species_ID = spec_all.df$Species_ID
View(spec_df)
spec_df$Location = spec_all.df$Location
?pam
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
rf = randomForest(x = spec_df[,-c(202,203)], ntree= 2000, proximity = T)
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
prox = rf$proximity
pam6 = pam(prox, 6)
library(cluster)
pam6 = pam(prox, 6)
pred = cbind(pam6$clustering, spec_df$GenePop_ID)
table(pred[,2],pred[,1])
pred = cbind(pam6$clustering, spec_df$Location)
table(pred[,2],pred[,1])
pam6 = pam(prox, 3)
pred = cbind(pam6$clustering, spec_df$Species_ID)
table(pred[,2],pred[,1])
pam6 = pam(prox, 2)
pred = cbind(pam6$clustering, spec_df$Species_ID)
table(pred[,2],pred[,1])
sp.t = table(pred[,2],pred[,1])
sp.t = as.data.frame(table(pred[,2],pred[,1]))
View(sp.t)
pred = cbind(pam6$clustering, spec_df$Species_ID)
sp.t = as.matrix(table(pred[,2],pred[,1]))
?confusionMatrix
sp.cm = confusionMatrix(table(pred[,2],pred[,1]))
sp.t = table(pred[,2],pred[,1]))
sp.t = table(pred[,2],pred[,1])
sp.t
colnames(sp.t) = rownames(sp.t)
sp.t
sp.cm = confusionMatrix(sp.t)
sp.cm$overall
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#Code for new populations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
sp.cm = confusionMatrix(sp.t)
sp.k = sp.cm$overall[,2]
prox = rf$proximity
#species
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
sp.cm = confusionMatrix(sp.t)
sp.k = sp.cm$overall[,2]
sp.k = sp.cm$overall[2]
sp.cm
sp.cm$overall
#population
pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
pop.cm = confusionMatrix(pop.t)
pop.k = pop.cm$overall[2]
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
loc.cm = confusionMatrix(loc.t)
loc.k = loc.cm$overall[2]
#species+location
pam12 = pam(prox, 12)
pred.sploc = cbind(pam12$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
sploc.k = sploc.cm$overall[2]
sp.k
pop.k
loc.k
sploc.k
#species+location
pam12 = pam(prox, 12)
pred.sploc = cbind(pam12$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.t
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
sploc.k = sploc.cm$overall[2]
sploc.k
sp.k
pop.k
loc.k
sploc.k
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
library(cluster)
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("clean_all.rds")
spec_all = readRDS("clean_all.rds")
#add new population delineations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
#remove any NaN values
##Note: this removes hybrids
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm to reduce redundant data
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
#add important classes
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
#model
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
prox = rf$proximity
#species
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
sp.cm = confusionMatrix(sp.t)
saveRDS(sp.cm, "rf_confusion_matrix_output/species_cm.rds")
sp.k = sp.cm$overall[2]
#population
pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
pop.cm = confusionMatrix(pop.t)
saveRDS(pop.cm, "rf_confusion_matrix_output/pop_cm.rds")
pop.k = pop.cm$overall[2]
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
loc.cm = confusionMatrix(loc.t)
saveRDS(loc.cm, "rf_confusion_matrix_output/location_cm.rds")
loc.k = loc.cm$overall[2]
#species+location
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
saveRDS(sploc.cm, "rf_confusion_matrix_output/species_location.rds")
sploc.k = sploc.cm$overall[2]
#kappa scores
sp.k
pop.k
loc.k
sploc.k
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
library(cluster)
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("clean_all.rds")
#add new population delineations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
#remove any NaN values
##Note: this removes hybrids
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm to reduce redundant data
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
#add important classes
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
s.kappa <- c()
p.kappa <- c()
l.kappa <- c()
sl.kappa <- c()
for(i in 1:100){
#model
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
#predict classes from proximity matrix extracted from model
prox = rf$proximity
#species
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
s.cm = confusionMatrix(sp.t)
s.kap = assign(paste0("s.kap",i), s.cm$overall[2])
s.kappa <- append(s.kappa, get('s.kap'))
#population
pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
p.cm = confusionMatrix(pop.t)
p.kap = assign(paste0("p.kap",i), p.cm$overall[2])
p.kappa <- append(p.kappa, get('p.kap'))
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
l.cm = confusionMatrix(loc.t)
l.kap = assign(paste0("l.kap",i), l.cm$overall[2])
l.kappa <- append(l.kappa, get('l.kap'))
#species+location
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sl.cm = confusionMatrix(sploc.t)
sl.kap = assign(paste0("sl.kap",i), sl.cm$overall[2])
sl.kappa <- append(sl.kappa, get('sl.kap'))
}
df = data.frame(row.names = c("Species", "Population", "Location", "Species+Loc"))
s.mean = mean(s.kappa)
p.mean = mean(p.kappa)
l.mean = mean(l.kappa)
sl.mean = mean(sl.kappa)
k.mean = c(s.mean, p.mean, l.mean, sl.mean)
df = cbind(df, k.means)
df = cbind(df, k.mean)
s.sd = sd(s.kappa)
p.sd = sd(p.kappa)
l.sd = sd(l.kappa)
sl.sd = sd(sl.kappa)
k.sd = c(s.sd, p.sd, l.sd, sl.sd)
df = cbind(df, k.sd)
colnames(df) = c("Kappa Mean", "Kappa SD")
view(df)
df
saveRDS(df, "rf_confusion_matrix_ouput/kappa_stats.rds")
write.csv(df, file="rf_confusion_matrix_output/kappa_stats.csv")
?pam
