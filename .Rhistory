col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions, cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry", pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min, DA$DA, DA$max,length=0.05, angle=90, code=0, col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
?legend
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min,
DA$DA, DA$max,
length=0.05,
angle=90,
code=0,
col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white', cex = 1)
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min,
DA$DA, DA$max,
length=0.05,
angle=90,
code=0,
col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white', cex = .75)
plsFit = readRDS('Models/plsBeta/plsFit.rds')
#PLS with beta distribution for predicting ancestry
################################################################################
#Set up
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
pls_info_list = list()
for(i in 1:5) {
pls_info = plsRbeta::kfolds2CVinfos_beta(plsFit[[i]])
info = assign(paste0("pls_info", i), pls_info)
pls_info_list = list.append(pls_info_list, get('info'))
}
saveRDS(plsFit.info, 'Models/plsBeta/pls_info_list.rds')
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
pls_info_list = list()
for(i in 1:5) {
pls_info = plsRbeta::kfolds2CVinfos_beta(plsFit[[i]])
info = assign(paste0("pls_info", i), pls_info)
pls_info_list = list.append(pls_info_list, get('info'))
}
saveRDS(plsFit.info, 'Models/plsBeta/pls_info_list.rds')
pls_b = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
pls_b = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 30,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
#PLS with beta distribution for predicting ancestry
################################################################################
#Set up
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
View(spec_df)
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 10))
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 10))
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
m = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
warnings()
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)
library(ggplot2)
library(rgdal)
library(elevatr)
library(sp)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
na = st_read('alaska bounds/ne_10m_land.shp')
View(na)
plot(na)
countries = st_read('alaska bounds/ne_10m_admin_0_countries.shp')
View(countries)
na_countries = c('Canada', 'Mexico', 'United States of America')
na = countries[countries$NAME %in% na_countries,]
View(na)
plot(na)
plot(na$featurecla)
plot(na[1])
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
na2 = st_transform(na, crs)
plot(na2[1])
bounds_na = st_bbox(c(xmin = -170, xmax = -45, ymin = 10, ymax = 75), crs = crs)
#create site rectangle
x1 = -150
x2 = -144
y1 = 63.5
y2 = 65.75
rect = Polygon(cbind(c(x1,x1,x2,x2,x1),c(y1,y2,y2,y1,y1)))
rect1 = Polygons(list(rect), ID = 'A')
sp.rect = SpatialPolygons(list(rect1))
proj4string(sp.rect) = crs
df = matrix(data = c(0))
rownames(df) = "A"
rect_spp = SpatialPolygonsDataFrame(sp.rect, data = as.data.frame(df))
#map
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill()
na_map
alaska_map_box = alaska_map + tm_shape(rect_spp) + tm_borders()
alaska_map_box = na_map + tm_shape(rect_spp) + tm_borders()
alaska_map_box
?tm_borders
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill() + tm_borders()
na_map_box = na_map + tm_shape(rect_spp) + tm_borders()
na_map_box
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red')
na_map_box
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red', lwd = 2)
na_map_box
sites1 = read.csv('sites.csv')
sites = st_as_sf(sites1, coords = c("X", "Y"))
st_crs(sites) <- crs
#map
points = tm_shape(sites) + tm_dots(size = .3, shape = 18) +
tm_text('Name', auto.placement = .7, size = 1.15)
################################################################################
#DEM
################################################################################
examp_df <- data.frame(x = seq(from = -144.0, to = -150.0, length.out = 1000),
y = seq(from = 63.5, to = 65.75, length.out = 1000))
# get raster
elevation_df <- get_elev_raster(examp_df, prj = crs, z = 8)
slope = terrain(elevation_df, opt = 'slope')
aspect = terrain(elevation_df, opt = 'aspect')
hill = hillShade(slope, aspect)
#map
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
dem
################################################################################
#Final Map
################################################################################
map_final = dem + points
library(grid)
map_final
print(na_map_box, vp = viewport(0.775, 0.46, width = 0.22, height = 0.22))
map_final
print(na_map_box, vp = viewport(0.775, 0.46, width = 0.22, height = 0.22))
map_final
print(na_map_box, vp = viewport(0.775, 0.46, width = 0.22, height = 0.22))
?viewport
print(na_map_box, vp = viewport(0.5, 0.25, width = 0.22, height = 0.22))
map_final
print(na_map_box, vp = viewport(0.5, 0.25, width = 0.22, height = 0.22))
map_final
print(na_map_box, vp = viewport(0.5, 0.25, width = 0.15, height = 0.22))
print(na_map_box, vp = viewport(0.7, 0.6, width = 0.19, height = 0.22))
print(na_map_box, vp = viewport(0.7, 0.6, width = 0.19, height = 0.3))
print(na_map_box, vp = viewport(0.6, 0.15, width = 0.3, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.65, 0.25, width = 0.3, height = 0.3))
print(na_map_box, vp = viewport(0.65, 0.25, width = 0.25, height = 0.3))
print(na_map_box, vp = viewport(0.5, 0.25, width = 0.25, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.58, 0.25, width = 0.25, height = 0.3))
print(na_map_box, vp = viewport(0.58, 0.25, width = 0.21, height = 0.3))
print(na_map_box, vp = viewport(0.56, 0.22, width = 0.21, height = 0.3))
print(na_map_box, vp = viewport(0.57, 0.23, width = 0.21, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.57, 0.23, width = 0.21, height = 0.3))
bounds_na = st_bbox(c(xmin = -170, xmax = -42, ymin = 12, ymax = 78), crs = crs)
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill() + tm_borders()
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red', lwd = 2)
na_map_box
bounds_na = st_bbox(c(xmin = -170, xmax = -45, ymin = 15, ymax = 78), crs = crs)
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill() + tm_borders()
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red', lwd = 2)
na_map_box
bounds_na = st_bbox(c(xmin = -170, xmax = -50, ymin = 15, ymax = 78), crs = crs)
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill() + tm_borders()
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red', lwd = 2)
na_map_box
bounds_na = st_bbox(c(xmin = -170, xmax = -55, ymin = 15, ymax = 78), crs = crs)
na_map = tm_shape(na2[1], bbox = bounds_na) + tm_fill() + tm_borders()
na_map_box = na_map + tm_shape(rect_spp) + tm_borders(col = 'red', lwd = 2)
na_map_box
?tm_legend
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
dem
map_final = dem + points
library(grid)
map_final
print(na_map_box, vp = viewport(0.57, 0.23, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.8, .5), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
dem
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.57, 0.23, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.8, .4), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.7, 0.2, width = 0.21, height = 0.3))
print(na_map_box, vp = viewport(0.75, 0.2, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.8, .3), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.76, 0.2, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.81, .25), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.76, 0.19, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.805, .26), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.8025, .265), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
dem =
tm_shape(elevation_df) +
tm_raster(n=6, palette = 'YlGnBu', title = "Elevation (m)") +
tm_shape(hill) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE, alpha = 0.6) +
tm_legend(outside = F, position = c(.8023, .265), bg.color = 'white', frame = T) +
tm_compass(type = '4star', position = c("right","top")) +
tm_scale_bar(breaks = c(0, 50, 100, 200), text.size = 1, position = c('left', 'bottom')) +
tm_grid(alpha = .1) +
tm_xlab("Longitude") +
tm_ylab("Latitude")
################################################################################
#Final Map
################################################################################
map_final = dem + points
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
map_final
print(na_map_box, vp = viewport(0.76, 0.195, width = 0.21, height = 0.3))
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 2))
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 2))
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
m = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 2))
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
################################################################################
#Training and testing sets - all
################################################################################
numCores = detectCores()
registerDoParallel(numCores)
#parallelized plsBeta regression
plsFit = foreach (i = 1:5) %dopar% {
library(plsRbeta)
m = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
}
saveRDS(plsFit, 'Models/plsBeta/plsFit_2nm.rds')
