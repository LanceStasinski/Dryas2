method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctr,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 15,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 50,
metric = "ROC"
)
plsFit
ggplot(plsFit)
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 100,
metric = "ROC"
)
plsFit
ggplot(plsFit)
str(plsClasses)
plsClasses <- predict(plsFit, newdata = testing)
str(plsClasses)
plsProbs <- predict(plsFit, newdata = testing, type = "prob")
head(plsProbs)
confusionMatrix(data = plsClasses, testing$Species_ID)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm$table
cmtable = cm$table
cm.df = as.data.frame(cmtable)
View(cm.df)
cm$dots
cm$positive
cm$overall
cm$byClass
cm$mode
cm
cm.m = as.matrix(cmtable)
ggplot(cm)
ggplot(cmtable)
ggplot(cm.df)
plot(cm)
plot(cmtable)
cm.m = as.matrix(cm)
View(cm.m)
?assign
for(i in 1:10){
set.seed(i)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 100,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm.m = as.matrix(cm)
assign(paste0("cm", i), cm.m)
}
warnings()
cm.total = (cm1 + cm2 + cm3 + cm4 + cm5 + cm6 + cm7 + cm8+ cm9 + cm10)/10
View(cm.total)
?resamples
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm.m = as.matrix(cm)
warnings()
plsFit
################################################################################
#Set up
################################################################################
library(spectrolab)
library(caret)
library(mlbench)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all dry
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Partition Data
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
confusionMatrix(data = plsClasses, testing$Species_ID)
plsFit
ggplot(plsFit)
warnings()
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Partition Data
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200)
plsFit
1500 + 600 + 26+ 100+140+2000
4366+550
library(spectrolab)
library(caret)
library(mlbench)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all dry
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Partition Data
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200)
plsFit
#test model
plsClasses <- predict(plsFit, newdata = testing)
confusionMatrix(data = plsClasses, testing$Species_ID)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
plot(cm)
cm.m = as.matrix(cm)
plot(cm.m)
plsFit$resample
plsFit$dots
list()
plot(plsFit$finalModel$loadings)
plsFit$finalModel$loadings
################################################################################
#Set up
################################################################################
library(tidyverse)
library(caret)
library(pls)
library(spectrolab)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spectra.m = cbind(DA = spectra.df$DA, spectra.m)
spectra.m = cbind(Location = as.factor(spectra.df$Location), spectra.m)
################################################################################
#Training and testing sets - all
################################################################################
set.seed(12)
training.samples <-
createDataPartition(spectra.m[,"DA"], p = 0.8, list = FALSE)
train.data  <- spectra.m[training.samples, ]
test.data <- spectra.m[-training.samples, ]
################################################################################
#PLS R - all
################################################################################
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune
summary(model$finalModel)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance metrics
results = data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
model$modelType
model$results
model$pred
model$modelInfo
model$finalModel$fitted.values
model$results
model$method
model$modelType
model$modelInfo$predict()
model$pred
predictions
plot(test.data, predictions)
test.data
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
spectra.df = as.data.frame(spectra)
View(spectra.df)
spectra.m = as.matrix(spectra)
View(spectra.m)
spec_df = as.data.frame(spectra.m)
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == "spectra.df$DA"] <- "DA"
set.seed(12)
training.samples <-
createDataPartition(spec_df$DA, p = 0.8, list = FALSE)
train.data  <- spectra.m[training.samples, ]
test.data <- spectra.m[-training.samples, ]
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune
summary(model$finalModel)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance metrics
results = data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
write.csv(results, "Figures/DA_plsr.csv")
train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
# Plot model RMSE vs different values of components
plot(model)
model$bestTune
summary(model$finalModel)
# Make predictions
predictions <- model %>% predict(test.data)
results = data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
results
write.csv(results, "Figures/DA_plsr.csv")
plot(test.data$DA, predictions)
predictions
plot(test.data$DA, predictions)
abline(lm(test.data$DA ~ predictions))
spec_df = cbind(spec_df, spectra.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spectra.df$Species_ID"] <- "Species_ID"
set.seed(12)
training.samples <-
createDataPartition(spec_df$DA, p = 0.8, list = FALSE)
train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]
View(train.data)
View(train.data)
set.seed(12)
model <- train(
DA~ train.data[1:2001,], data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
set.seed(12)
model <- train(
DA~ train.data[,-2003], data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra = readRDS("Clean-up/Vector_normalized/all_vn.rds")
es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))
spectra = spectra[!meta(spectra)$DA == "NaN",]
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == "spectra.df$DA"] <- "DA"
spec_df2 = cbind(spec_df, spectra.df$Species_ID)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Species_ID"] <- "Species_ID"
#########################
training.samples <-
createDataPartition(spec_df$DA, p = 0.8, list = FALSE)
train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]
train.plot <-spec_df2[training.samples, ]
test.plot <- spec_df2[-training.samples, ]
set.seed(12)
model <- train(
DA~., data = train.data, method = "pls",
scale = TRUE,
trControl = trainControl("cv", number = 30),
tuneLength = 50
)
# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune
summary(model$finalModel)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance metrics
results = data.frame(
RMSE = caret::RMSE(predictions, test.data[,"DA"]),
Rsquare = caret::R2(predictions, test.data[,"DA"])
)
plot(test.data$DA, predictions)
abline(lm(test.data$DA ~ predictions))
points(test.plot$Species_ID)
points(test.plot$DA)
