#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
names(spec_all) = meta(spec_all)$Species
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
rownames(spec_mat) = seq(nrow(spec_mat))
seq(nrow(spec_mat))
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
names(spec_all) = meta(spec_all)$Species
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
resp
set.seed(1)
inTrain <- createDataPartition(
y = resp,
p = .75,
list = FALSE
)
?createDataPartition
inTrain <- createDataPartition(
y = resp,
p = .75,
list = FALSE
)
inTrain <- caret::createDataPartition(
y = resp,
p = .75,
list = FALSE
)
library(spectrolab)
library(caret)
install.packages('caret')
library(caret)
library(mlbench)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all dry
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
names(spec_all) = meta(spec_all)$Species
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
set.seed(1)
inTrain <- caret::createDataPartition(
y = resp,
p = .75,
list = FALSE
)
str(inTrain)
training <- spec_mat[inTrain,]
testing <- spec_mat[-inTrain,]
nrow(training)
nrow(testing)
?train
rownames(spec_mat) = seq(nrow(spec_mat))
set.seed(1)
inTrain <- caret::createDataPartition(
y = resp,
p = .8,
list = FALSE
)
training <- spec_mat[inTrain,]
testing <- spec_mat[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
resp ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctr,
metric = "ROC"
)
plsFit
resp
training
View(spec_all.df)
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
names(spec_all) = meta(spec_all)$Species
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
View(spec_df)
?cbind
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
View(spec_df)
spec_mat = as.matrix(spec_df)
View(spec_mat)
?colnames
colnames(spec_mat)[colnames(spec_mat) == "spec_all.df$Species_ID"]
colnames(spec_mat)[colnames(spec_mat) == "spec_all.df$Species_ID"] <- "Species_ID"
View(spec_mat)
#define the response variable
resp = spec_mat[,"Species_ID"]
resp
set.seed(1)
inTrain <- caret::createDataPartition(
y = resp,
p = .8,
list = FALSE
)
training <- spec_mat[inTrain,]
testing <- spec_mat[-inTrain,]
training
class(training)
?cbind
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
View(spec_df)
#define the response variable
resp = spec_df$Species_ID
set.seed(1)
inTrain <- caret::createDataPartition(
y = resp,
p = .8,
list = FALSE
)
training <- spec_mat[inTrain,]
testing <- spec_mat[-inTrain,]
training
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctr,
metric = "ROC"
)
plsFit
View(training)
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#define data
data(spec_df)
data(Sonar)
View(Sonar)
class(Sonar)
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_mat[inTrain,]
testing <- spec_mat[-inTrain,]
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctr,
metric = "ROC"
)
library(caret)
library(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(
y = Sonar$Class,
## the outcome data are needed
p = .75,
## The percentage of data in the
## training set
list = FALSE
)
training <- Sonar[ inTrain,]
testing  <- Sonar[-inTrain,]
View(testing)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
View(spec_df)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
View(testing)
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctr,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 15,
metric = "ROC"
)
plsFit
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 50,
metric = "ROC"
)
plsFit
ggplot(plsFit)
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 100,
metric = "ROC"
)
plsFit
ggplot(plsFit)
str(plsClasses)
plsClasses <- predict(plsFit, newdata = testing)
str(plsClasses)
plsProbs <- predict(plsFit, newdata = testing, type = "prob")
head(plsProbs)
confusionMatrix(data = plsClasses, testing$Species_ID)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm$table
cmtable = cm$table
cm.df = as.data.frame(cmtable)
View(cm.df)
cm$dots
cm$positive
cm$overall
cm$byClass
cm$mode
cm
cm.m = as.matrix(cmtable)
ggplot(cm)
ggplot(cmtable)
ggplot(cm.df)
plot(cm)
plot(cmtable)
cm.m = as.matrix(cm)
View(cm.m)
?assign
for(i in 1:10){
set.seed(i)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 100,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm.m = as.matrix(cm)
assign(paste0("cm", i), cm.m)
}
warnings()
cm.total = (cm1 + cm2 + cm3 + cm4 + cm5 + cm6 + cm7 + cm8+ cm9 + cm10)/10
View(cm.total)
?resamples
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, testing$Species_ID)
cm.m = as.matrix(cm)
warnings()
plsFit
################################################################################
#Set up
################################################################################
library(spectrolab)
library(caret)
library(mlbench)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all dry
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Partition Data
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
summaryFunction = defaultSummary)
set.seed(1)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200,
metric = "ROC"
)
#test model
plsClasses <- predict(plsFit, newdata = testing)
confusionMatrix(data = plsClasses, testing$Species_ID)
plsFit
ggplot(plsFit)
warnings()
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Partition Data
set.seed(1)
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3)
plsFit <- train(
Species_ID ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLength = 200)
plsFit
