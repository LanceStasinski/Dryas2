modele = 'pls-beta')
plsFit1$PredictY
plsFit1$FinalModel$fitted.values
plot(plsFit1$FinalModel$fitted.values, train.data$DA)
plot(train.data$DA, plsFit1$FinalModel$fitted.values)
plsFit1$InfCrit
plsFit1$FinalModel$optim
plsFit1$FinalModel$method
plsFit1$FinalModel$y
plsFit1$InfCrit
prediction = plsFit1$FinalModel$model %>% predict(test.data)
plsFit$results_kfolds
plsFit$results_kfolds[[1[10[,100]]]]
plsFit$results_kfolds[[1[10]]
]
plsFit$results_kfolds[[1[10]]]
plsFit$results_kfolds[1,100]
x = as.data.frame(plsFit$results_kfolds[[1]])
plsFit$results_kfolds[[1]][[10]]
plsFit$results_kfolds[[1]][[10]][,100]
plsFit$results_kfolds[[1]][[1:10]]
for(i in 1:10){
cbind(plsFit$results_kfolds[[1]][[i]])
}
for(i in 1:10){
t= cbind(plsFit$results_kfolds[[1]][[i]])
}
for(i in 1:10){
t= cbind(plsFit$results_kfolds[[1]][[i]][,100])
}
View(t)
t = for(i in 1:10){
cbind(plsFit$results_kfolds[[1]][[i]][,100])
}
result.m = matrix()
for(i in 1:10){
result = assign(paste0('result', i), as.matrix(plsFit$results_kfolds[[1]][[i]][,100]))
result.m = rbind(result.m, get('result'))
}
View(result.m)
plot(train.data, result.m)
plot(train.data, result.m)
plot(train.data$DA, result.m)
train.data$DA
result.m
plot(train.data$DA, result.m[,1])
result.m[,1]
View(result.m)
plot(train.data$DA, result.m[-1,])
plot(info.df$RMSE)
plot(info.df$AIC)
plot(info.df$BIC)
plot(info.df$Q2Chisqcum_Y)
plot(info.df$PREChi2_Pearson_Y)
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Set up
################################################################################
spec_all= readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spectra = resample(spec_all, seq(400, 2400, by = 10))
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
#These objects are used for plotting later
spec_df2 = cbind(spec_df, spectra.df$Species_ID)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Species_ID"]<- "Species_ID"
spec_df2 = cbind(spec_df2, spectra.df$Name)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Name"] <- 'Name'
################################################################################
#Training and testing sets - all
################################################################################
#set number of components
ncomp = 80
#cross validation
plsFit = PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = ncomp,
modele = 'pls-beta', K = 10, NK = 5,
verbose = T)
saveRDS(plsFit, '10fold_r5_80comp.rds')
plsFit = PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = ncomp,
modele = 'pls-beta', K = 10, NK = 5,
verbose = T)
saveRDS(plsFit, '10fold_r5_80comp.rds')
plsFit.info = kfolds2CVinfos_beta(plsFit)
saveRDS(plsFit.info, 'pls_beta_info_10fold_5r_80comp.rds')
warnings()
plsFit.info
plsFit$results_kfolds
?PLS_beta_kfoldcv_formula
#PLS with beta distribution for predicting ancestry
################################################################################
#Set up
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Set up
################################################################################
spec_all= readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spectra = resample(spec_all, seq(400, 2400, by = 10))
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
#These objects are used for plotting later
spec_df2 = cbind(spec_df, spectra.df$Species_ID)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Species_ID"]<- "Species_ID"
spec_df2 = cbind(spec_df2, spectra.df$Name)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Name"] <- 'Name'
################################################################################
#Training and testing sets - all
################################################################################
#set number of components
ncomp = 80
#cross validation
plsFit = PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = ncomp,
modele = 'pls-beta', K = 10, NK = 5,
verbose = T, random = T)
saveRDS(plsFit, '10fold_r5_80comp_randompart.rds')
plsFit.info = kfolds2CVinfos_beta(plsFit)
saveRDS(plsFit.info, 'pls_beta_info_10fold_5r_80comp_randompart.rds')
plsFit.info
for(i in 1:5){
info.df = as.data.frame(plsFit.info[[i]])
info.df$RMSE <- sqrt(info.df$RSS_Y/460)
assign(paste0('info.df_', i), info.df)
}
View(info.df_5)
rmse_total = Reduce(cbind, list(info.df_1$RMSE, info.df_2$RMSE, info.df_3$RMSE,
info.df_4$RMSE, info.df_5$RMSE))
View(rmse_total)
rownames(rmse_total) <- c(0:80)
colnames(rmse_total) <- c(1:5)
View(rmse_total)
mean_rmse = as.matrix(rowMeans(rmse_total))
sd_rmse = as.matrix(rowSds(rmse_total))
#Upper and lower bounds for plot
rmse_lower = mean_rmse - sd_rmse
rmse_upper = mean_rmse + sd_rmse
#Graph to visually choose optimal number of components
x = 1:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_rmse, type = 'p', pch = 16, cex = .75, ylab = 'RMSE',
xlab = 'Component', xlim = c(1,80), main = 'RMSE vs Component')
arrows(x, rmse_lower, x, rmse_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(rmse_upper), col = "Red")
legend('bottomright', legend = c('Mean', 'Lowest RMSE','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_rmse, type = 'p', pch = 16, cex = .75, ylab = 'RMSE',
xlab = 'Component', xlim = c(0,80), main = 'RMSE vs Component')
arrows(x, rmse_lower, x, rmse_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(rmse_upper), col = "Red")
legend('bottomright', legend = c('Mean', 'Lowest RMSE','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_rmse, type = 'p', pch = 16, cex = .75, ylab = 'RMSE',
xlab = 'Component', xlim = c(0,80), main = 'RMSE vs Component')
arrows(x, rmse_lower, x, rmse_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(rmse_upper), col = "Red")
legend('bottomright', legend = c('Mean', 'Lowest RMSE','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
warnings()
plsFit$results_kfolds[[1]][[1]]
warnings()
plsFit$results_kfolds[[2]][[1]]
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_rmse, type = 'p', pch = 16, cex = .75, ylab = 'RMSE',
xlab = 'Component', xlim = c(0,80), main = 'RMSE vs Component')
arrows(x, rmse_lower, x, rmse_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(rmse_upper), col = "Red")
legend('topright', legend = c('Mean', 'Lowest RMSE','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
aic_total = Reduce(cbind, list(info.df_1$AIC, info.df_2$AIC, info.df_3$AIC,
info.df_4$AIC, info.df_5$AIC))
rownames(aic_total) <- c(0:80) #number of components
colnames(aic_total) <- c(1:5) #number of repeats
#Calculate mean and standard deviation by component
mean_aic = as.matrix(rowMeans(aic_total))
sd_aic = as.matrix(rowSds(aic_total))
#Upper and lower bounds for plot
aic_lower = mean_aic - sd_aic
aic_upper = mean_aic + sd_aic
#Graph to visually choose optimal number of components
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_aic, type = 'p', pch = 16, cex = .75, ylab = 'aic',
xlab = 'Component', xlim = c(0,80), main = 'aic vs Component')
arrows(x, aic_lower, x, aic_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(aic_upper), col = "Red")
legend('topright', legend = c('Mean', 'Lowest aic','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_aic, type = 'p', pch = 16, cex = .75, ylab = 'AIC',
xlab = 'Component', xlim = c(0,80), main = 'AIC vs Component')
arrows(x, aic_lower, x, aic_upper,length=0.05, angle=90, code=3)
abline(v = 38, col = 'blue')
abline(h = min(mean_aic) + 2, col = "Red")
legend('topright', legend = c('Mean', 'Lowest AIC','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_aic, type = 'p', pch = 16, cex = .75, ylab = 'AIC',
xlab = 'Component', xlim = c(0,80), main = 'AIC vs Component')
arrows(x, aic_lower, x, aic_upper,length=0.05, angle=90, code=3)
abline(v = 52, col = 'blue')
abline(h = min(mean_aic) + 2, col = "Red")
legend('topright', legend = c('Mean', 'Lowest AIC','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
#lowest AIC
best_aic = min(mean_aic)
best_aic
rowname(min(mean_aic))
rownames(min(mean_aic))
View(aic_total)
#create BIC matrix
BIC_total = Reduce(cbind, list(info.df_1$BIC, info.df_2$BIC, info.df_3$BIC,
info.df_4$BIC, info.df_5$BIC))
rownames(BIC_total) <- c(0:80) #number of components
colnames(BIC_total) <- c(1:5) #number of repeats
#Calculate mean and standard deviation by component
mean_BIC = as.matrix(rowMeans(BIC_total))
sd_BIC = as.matrix(rowSds(BIC_total))
#lowest BIC
best_BIC = min(mean_BIC)
#Upper and lower bounds for plot
BIC_lower = mean_BIC - sd_BIC
BIC_upper = mean_BIC + sd_BIC
#Graph to visually choose optimal number of components
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_BIC, type = 'p', pch = 16, cex = .75, ylab = 'BIC',
xlab = 'Component', xlim = c(0,80), main = 'BIC vs Component')
arrows(x, BIC_lower, x, BIC_upper,length=0.05, angle=90, code=3)
abline(v = 54, col = 'blue')
abline(h = min(mean_BIC) + 2, col = "Red")
legend('topright', legend = c('Mean', 'Lowest BIC','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
#lowest BIC
best_BIC = min(mean_BIC)
best_BIC
View(BIC_total)
x = 0:80
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, mean_BIC, type = 'p', pch = 16, cex = .75, ylab = 'BIC',
xlab = 'Component', xlim = c(0,80), main = 'BIC vs Component')
arrows(x, BIC_lower, x, BIC_upper,length=0.05, angle=90, code=3)
abline(v = 46, col = 'blue')
abline(h = min(mean_BIC) + 2, col = "Red")
legend('topright', legend = c('Mean', 'Lowest BIC','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
info.df_1
plsFit.info[[1]]
plsFit.info[[2]]
plsFit.info[[3]]
plsFit.info[[5]]
plsFit.info[[6]]
result.total = matrix()
result.m = matrix()
warnings
warnings()
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[1]][[k]][,46]))
result.m = rbind(result.m, get('result.k'))
}
View(result.m)
for(NK in 1:10){
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[NK]][[k]][,46]))
result.m = rbind(result.m, get('result.k'))
}
result.t = assign(paste0('result.t', NK), result.m)
result.total = cbind(result.total, get('result.t'))
}
for(NK in 1:5){
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[NK]][[k]][,46]))
result.m = rbind(result.m, get('result.k'))
}
result.t = assign(paste0('result_', NK), result.m)
}
View(result_1)
View(result_2)
View(result_3)
View(result_4)
View(result_3)
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[1]][[k]][,46]))
result.m1 = rbind(result.m, get('result.k'))
}
result.m = matrix()
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[1]][[k]][,46]))
result.m2 = rbind(result.m, get('result.k'))
}
for(k in 1:10){
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[2]][[k]][,46]))
result.m2 = rbind(result.m, get('result.k'))
}
View(result.m2)
View(result.m2)
View(result.m1)
View(result.m2)
for(NK in 1:5){
for(k in 1:10){
result.m = matrix()
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[NK]][[k]][,46]))
assign(paste0('result_', NK), rbind(result.m, get('result.k'))
}
}
for(NK in 1:5){
for(k in 1:10){
result.m = matrix()
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[NK]][[k]][,46]))
assign(paste0('result_', NK), rbind(result.m, get('result.k')))
}
}
View(result_1)
for(k in 1:10){
result.m = matrix()
result.k = assign(paste0('result.k', k),
as.matrix(plsFit$results_kfolds[[1]][[k]][,46]))
assign(paste0('result_', 1), rbind(result.m, get('result.k')))
}
View(result_1)
plsFit$results_kfolds
plsFit$results_kfolds[[1]][[1]]
plsFit$results_kfolds[[1]][[1]][,46]
x = rbind(plsFit$results_kfolds[[1]][[1]][,46], plsFit$results_kfolds[[1]][[2]][,46])
warnings()
View(x)
x = cbind(plsFit$results_kfolds[[1]][[1]][,46], plsFit$results_kfolds[[1]][[2]][,46])
plsFit$results_kfolds[[1]][[2]][,46]
plsFit$results_kfolds[[1]][[1]][,46]
x = list(plsFit$results_kfolds[[1]][[1]][,46], plsFit$results_kfolds[[1]][[2]][,46])
as.matrix(plsFit$results_kfolds[[1]][[1]][,46])
x = rbind(as.matrix(plsFit$results_kfolds[[1]][[1]][,46]), as.matrix(plsFit$results_kfolds[[1]][[2]][,46]))
View(x)
for(k in 1:10){
y = Reduce(rbind, list(as.matrix(plsFit$results_kfolds[[1]][[k]][,46])))
}
View(y)
library(rlist)
results.list = list()
for(k in 1:10){
matr = as.matrix(plsFit$results_kfolds[[1]][[k]][,46])
result.matrix = assign(paste0('matr',i), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
View(results.list)
for(NK in 1:5){
results.list = list()
for(k in 1:10){
matr = as.matrix(plsFit$results_kfolds[[NK]][[k]][,46])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
assign(paste0('results.list_', NK), results.list)
}
View(results.list_1)
View(results.list_2)
View(results.list_3)
View(results.list_4)
for(NK in 1:5){
results.list = list()
for(k in 1:10){
matr = as.matrix(plsFit$results_kfolds[[NK]][[k]][,46])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(rbind, results.list)
assign(paste0('full.mat_', NK), full.mat)
}
View(full.mat)
rownames(spec_df)
full.mat_1 = full.mat_1[row.names(spec_df),,drop = F]
full.mat_2 = full.mat_2[row.names(spec_df),,drop = F]
View(full.mat_1)
View(full.mat_2)
for(NK in 1:5){
results.list = list()
for(k in 1:10){
matr = as.matrix(plsFit$results_kfolds[[NK]][[k]][,46])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(rbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
View(full.mat_1)
View(full.mat_2)
View(full.mat_3)
View(full.mat_4)
mean.predictions = Reduce(mean, list(full.mat_1, full.mat_2, full.mat_3,
full.mat_4, full.mat_5))
mean.predictions = (full.mat_1 + full.mat_2 + full.mat_3 +full.mat_4 +
full.mat_5)/5
View(mean.predictions)
View(spectra.df)
#average the predictions
mean.predictions = as.data.frame((full.mat_1 + full.mat_2 + full.mat_3 +full.mat_4 +
full.mat_5)/5)
View(mean.predictions)
colnames(mean.predictions) <- c("Predictions")
View(mean.predictions)
mean.predictions$DA <- spectra.df$DA
mean.predictions$Species_ID <- spectra.df$Species_ID
#assign colors
mean.predictions$color = 'black'
mean.predictions$color[mean.predictions$Species_ID == "DO"] = "#F8766D"
mean.predictions$color[mean.predictions$Species_ID == "DA"] = "#00B0F6"
#plot actual ancestry vs predicted ancestry
plot(mean.predictions$DA, mean.predictions$Predictions, cex.lab = 1.5,
xlab = "Actual DA ancestry", ylab = "Predicted DA ancestry")
lines(x = c(0, 1), y = c(0, 1))
points(mean.predictions$DA, mean.predictions$Predictions,
col = mean.predictions$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,1))
plot(mean.predictions$DA, mean.predictions$Predictions, cex.lab = 1.5,
xlab = "Actual DA ancestry", ylab = "Predicted DA ancestry")
lines(x = c(-2, 2), y = c(-2, 2))
points(mean.predictions$DA, mean.predictions$Predictions,
col = mean.predictions$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,1))
#extra
c.rmse = caret::RMSE(mean.predictions$Predictions, mean.predictions$DA)
c.rmse
c.r2 = caret::R2(mean.predictions$Predictions, mean.predictions$DA)
c.r2
plsFit.info
?kfolds2CVinfos_beta
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(mean.predictions$DA, mean.predictions$Predictions, cex.lab = 1.5,
xlab = "Actual DA ancestry", ylab = "Predicted DA ancestry")
lines(x = c(-2, 2), y = c(-2, 2))
points(mean.predictions$DA, mean.predictions$Predictions,
col = mean.predictions$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,1))
#plot actual ancestry vs predicted ancestry
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(mean.predictions$DA, mean.predictions$Predictions, cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensi ancestry")
lines(x = c(-2, 2), y = c(-2, 2))
points(mean.predictions$DA, mean.predictions$Predictions,
col = mean.predictions$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,1))
?legend
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(mean.predictions$DA, mean.predictions$Predictions, cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensi ancestry")
lines(x = c(-2, 2), y = c(-2, 2))
points(mean.predictions$DA, mean.predictions$Predictions,
col = mean.predictions$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,1), bg = 'white')
