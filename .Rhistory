verbose = T, random = T)
}
saveRDS(plsFit, 'Models/plsBeta/plsFit_final.rds')
library(spectrolab)
library(caret)
library(dplyr)
library(mlbench)
library(corrplot)
library(matrixStats)
library(naniar)
library(rlist)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
plsFit = readRDS('Models/plsBeta/plsFit.rds')
pls_info = readRDS('Models/plsBeta/pls_info.rds')
pls_info
info.df = as.data.frame(pls_info)
info.df$RMSE <- sqrt(info.df$RSS_Y/460)
View(info.df)
plsFit[[1]]
plsFit[[2]]$results_kfolds[[1]][[9]][,50]
m = as.matrix(plsFit[[2]]$results_kfolds[[1]][[9]][,50])
View(m)
View(m)
for(NK in 1:5){
results.list = list()
for(k in 1:10){
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(cbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
View(m)
View(m)
plsFit[[NK]]$results_kfolds[[1]][[6]]
plsFit[[1]]$results_kfolds[[1]][[6]]
plsFit[[1]]$results_kfolds[[1]][[6]][,50]
plsFit[[1]]$results_kfolds[[1]][[1]][,50]
length(plsFit[[1]]$results_kfolds[[1]][[1]][,50])
length(plsFit[[1]]$results_kfolds[[1]][[6]][,50])
length(plsFit[[1]]$results_kfolds[[1]][[6]])
plsFit[[1]]$results_kfolds[[1]][[7]][,50]
plsFit[[1]]$results_kfolds[[1]][[8]][,50]
plsFit[[1]]$results_kfolds[[1]][[9]][,50]
plsFit[[1]]$results_kfolds[[1]][[9]]
nrow(plsFit[[1]]$results_kfolds[[1]][[9]])
ncol(plsFit[[1]]$results_kfolds[[1]][[9]])
for(NK in 1:5){
results.list = list()
for(k in 1:10){
if (ncol(plsFit[[NK]]$results_kfolds[[1]][[k]]) < 50){
return()
} else {
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
}
full.mat = Reduce(cbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
ncol(plsFit[[1]]$results_kfolds[[1]][[1]])
?return()
for(NK in 1:5){
results.list = list()
for(k in 1:10){
if (ncol(plsFit[[NK]]$results_kfolds[[1]][[k]]) < 50) next
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(cbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
for(NK in 1:5) {
results.list = list()
for(k in 1:10){
if (ncol(plsFit[[NK]]$results_kfolds[[1]][[k]]) < 50) next
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
if (nrow(matr) == 69) {
matr = matr[-69,]
}
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(cbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
View(full.mat)
for(NK in 1:5) {
results.list = list()
for(k in 1:10){
if (ncol(plsFit[[NK]]$results_kfolds[[1]][[k]]) < 50) next
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
#if (nrow(matr) == 69) {
# matr = matr[-69,]
#}
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(rbind, results.list)
full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
for(NK in 1:5) {
results.list = list()
for(k in 1:10){
if (ncol(plsFit[[NK]]$results_kfolds[[1]][[k]]) < 50) next
matr = as.matrix(plsFit[[NK]]$results_kfolds[[1]][[k]][,50])
#if (nrow(matr) == 69) {
# matr = matr[-69,]
#}
result.matrix = assign(paste0('matr',k), matr)
results.list <- list.append(results.list, get('result.matrix'))
}
full.mat = Reduce(rbind, results.list)
#full.mat = full.mat[row.names(spec_df),,drop = F]
assign(paste0('full.mat_', NK), full.mat)
}
x = setdiff(full.mat_2, full.mat_5)
View(full.mat)
x = setdiff(rownames(full.mat_2), rownames(full.mat_5))
View(full.mat_5)
info.df
#Add pertinent metadata
mean.predictions = full.mat4
#Add pertinent metadata
mean.predictions = full.mat_4
colnames(mean.predictions) <- c("Predictions")
rownames(spectra.df)
rownames(spec_df)
remove_spec = setdiff(spec_df, mean.predictions)
remove_spec = setdiff(rownames(spec_df), rownames(mean.predictions))
nrow(spec_df)
spec_df2 = spec_df[!rownames(spec_df) %in% remove_spec]
spec_df2 = spec_df[!rownames(spec_df) %in% remove_spec, ]
colnames(mean.predictions) <- c("Predictions")
mean.predictions$DA <- spec_df2$DA
#Add pertinent metadata
mean.predictions = full.mat_4
mean.predictions = as.data.frame(mean.predictions)
colnames(mean.predictions) <- c("Predictions")
View(mean.predictions)
mean.predictions = mean.predictions[row.names(spec_df2),, drop = F]
View(spectra.df)
View(full.mat_4)
remove_spec = setdiff(spectra.df$sample_name, rownames(mean.predictions))
#Add pertinent metadata
mean.predictions = full.mat_4
spec_df2 = spectra.df[spectra.df$sample_name %in% remove_spec, ]
spec_df2 = spectra.df[!spectra.df$sample_name %in% remove_spec, ]
mean.predictions = as.data.frame(mean.predictions)
colnames(mean.predictions) <- c("Predictions")
mean.predictions = mean.predictions[row.names(spec_df2),, drop = F]
mean.predictions$DA <- spec_df2$DA
View(mean.predictions)
mean.predictions = full.mat_4
remove_spec = setdiff(spectra.df$sample_name, rownames(mean.predictions))
spec_df2 = spectra.df[!spectra.df$sample_name %in% remove_spec, ]
mean.predictions = as.data.frame(mean.predictions)
colnames(mean.predictions) <- c("Predictions")
mean.predictions = mean.predictions[row.names(spec_df2),, drop = F]
View(mean.predictions)
#Add pertinent metadata
mean.predictions = full.mat_4
mean.predictions = as.data.frame(mean.predictions)
remove_spec = setdiff(spectra.df$sample_name, rownames(mean.predictions))
spec_df2 = spectra.df[!spectra.df$sample_name %in% remove_spec, ]
colnames(mean.predictions) <- c("Predictions")
mean.predictions = mean.predictions[spec_df2$sample_name,, drop = F]
mean.predictions$DA <- spec_df2$DA
mean.predictions$Species_ID <- spec_df2$Species_ID
mean.predictions$Name <- spec_df2$Name
?aggregate
pred_mean = aggregate(mean.predictions, by = Name, FUN = mean)
pred_mean = aggregate(mean.predictions, by = mean.predictions$Name, FUN = mean)
pred_mean = aggregate(mean.predictions$Predictions, by = mean.predictions$Name, FUN = mean)
pred_mean = aggregate(mean.predictions$Predictions, by = l, FUN = mean)
l = list(mean.predictions$Name)
pred_mean = aggregate(mean.predictions$Predictions, by = l, FUN = mean)
View(pred_mean)
pred_sd = aggregate(mean.predictions$Predictions, by = l, FUN = sd)
View(pred_sd)
rownames(pred_mean) = pred_mean[,1]
pred_mean = pred_mean[,-1]
pred_sd2 = pred_sd[,-1]
pred_stats = cbind(pred_mean, pred_sd2)
View(pred_stats)
colnames(pred_stats) = c('mean', 'sd')
View(pred_stats)
rownames(pred_stats) = pred_sd[,1]
pred_stat = as.data.frame(pred_stats)
View(pred_stats)
View(pred_stat)
pred_stats = as.data.frame(pred_stats)
pred_stats$lower = pred_stats$mean - pred_stats$sd
View(pred_stats)
pred_stats$higher = pred_stats$mean + pred_stats$sd
DA = aggregate(DA~Name, data = mean.predictions, mean)
View(DA)
DA = DA[,-1]
pred_stats$DA = DA
?arrows
pred_stats$color = 'black'
pred_stats$color[pred_stats$DA > .7] = "#00B0F6"
pred_stats$color[pred_stats$DA < .3] = "#F8766D"
par(mfrow = c(1,1))
plot(pred_stats$DA, pred_stats$mean,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16)
lines(x = c(-2,2), y = c(-2,2), lty = 2)
arrows(pred_stats$DA, pred_stats$lower,
pred_stats$DA, pred_stats$higher,
angle = 90,
length = 0.05,
code = 3)
points(pred_stats$DA, pred_stats$mean,
col = pred_stats$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
l = list(mean.predictions$Name)
med = aggregate(mean.predictions$Predictions, by = l, median)
DA = aggregate(DA~Name, data = mean.predictions, mean)
DA$Predictions = med[,2]
max = aggregate(mean.predictions$Predictions, by = l, max)
DA$max = max[,2]
min = aggregate(mean.predictions$Predictions, by = l, min)
DA$min = min[,2]
DA$color = 'black'
DA$color[DA$DA > .7] = "#00B0F6"
DA$color[DA$DA < .3] = "#F8766D"
#plot actual ancestry vs predicted ancestry
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions, cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry", pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min, DA$DA, DA$max,length=0.05, angle=90, code=0, col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(pred_stats$DA, pred_stats$mean,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16,
ylim = c(-0.1, 1.1))
lines(x = c(-2,2), y = c(-2,2), lty = 2)
arrows(pred_stats$DA, pred_stats$lower,
pred_stats$DA, pred_stats$higher,
angle = 90,
length = 0.05,
code = 3,
col = pred_stats$color)
points(pred_stats$DA, pred_stats$mean,
col = pred_stats$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(pred_stats$DA, pred_stats$mean,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16,
ylim = c(-0.1, 1.1),
xlim = c(-0.1, 1.1))
lines(x = c(-2,2), y = c(-2,2), lty = 2)
arrows(pred_stats$DA, pred_stats$lower,
pred_stats$DA, pred_stats$higher,
angle = 90,
length = 0.05,
code = 3,
col = pred_stats$color)
points(pred_stats$DA, pred_stats$mean,
col = pred_stats$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions, cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry", pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min, DA$DA, DA$max,length=0.05, angle=90, code=0, col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color, pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white')
?legend
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min,
DA$DA, DA$max,
length=0.05,
angle=90,
code=0,
col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white', cex = 1)
dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(DA$DA, DA$Predictions,
cex.lab = 1.5,
xlab = "Actual Dryas alaskensis ancestry",
ylab = "Predicted Dryas alaskensis ancestry",
pch = 16)
lines(x = c(-2, 2), y = c(-2, 2), lty=2)
arrows(DA$DA, DA$min,
DA$DA, DA$max,
length=0.05,
angle=90,
code=0,
col = DA$color)
points(DA$DA, DA$Predictions,
col = DA$color,
pch = 16)
legend("bottomright", inset = 0.01,
legend=c("D. ajanensis", "Hybrid", "D. alaskensis", "1:1 line"),
text.font = c(3,1,3,1),
col=c("#F8766D", "black", "#00B0F6", "black"), pch = c(16,16,16,NA),
lty = c(NA,NA,NA,2), bg = 'white', cex = .75)
plsFit = readRDS('Models/plsBeta/plsFit.rds')
#PLS with beta distribution for predicting ancestry
################################################################################
#Set up
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
pls_info_list = list()
for(i in 1:5) {
pls_info = plsRbeta::kfolds2CVinfos_beta(plsFit[[i]])
info = assign(paste0("pls_info", i), pls_info)
pls_info_list = list.append(pls_info_list, get('info'))
}
saveRDS(plsFit.info, 'Models/plsBeta/pls_info_list.rds')
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
pls_info_list = list()
for(i in 1:5) {
pls_info = plsRbeta::kfolds2CVinfos_beta(plsFit[[i]])
info = assign(paste0("pls_info", i), pls_info)
pls_info_list = list.append(pls_info_list, get('info'))
}
saveRDS(plsFit.info, 'Models/plsBeta/pls_info_list.rds')
pls_b = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
pls_b = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 30,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
#PLS with beta distribution for predicting ancestry
################################################################################
#Set up
################################################################################
library(caret)
library(plsRbeta)
library(pls)
library(spectrolab)
library(matrixStats)
library(tidyverse)
library(rlist)
library(parallel)
library(foreach)
library(doParallel)
################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
View(spec_df)
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 10))
################################################################################
#spectra
spec_all= readRDS("Data/clean_all_6scans.rds")
#remove NAs
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spec_all = resample(spec_all, seq(400, 2400, 10))
#prepare data for PLS
spectra.df = as.data.frame(spec_all)
spectra.m = as.matrix(spec_all)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'
m = plsRbeta::PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 50,
modele = 'pls-beta', K = 10, NK = 1,
verbose = T, random = T)
warnings()
