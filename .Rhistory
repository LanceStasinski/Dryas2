kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
#accuracy and kappa
mean.acc = mean(accuracy)
sd.acc = sd(accuracy)
mean.kap = mean(kappa)
sd.kap = sd(kappa)
mean.acc
sd.acc
mean.kap
cm.total = Reduce('+', cm.list)/100
cm.total = t(cm.total)
cm.total = cm.total/rowSums(cm.total)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) <- c('DA', 'BG', 'ES-TM', 'MD', 'WDA','WDB')
colnames(cm.total) <- c('DA', 'BG', 'ES-TM', 'MD', 'WDA','WDB')
write.csv(cm.total, "Figures/cm_final/cm_GenePop_ID_mean.csv")
cols = colorRampPalette(c('#f5f5f5', '#b35806'))
par(mar = c(1,2,4,1), oma = c(1,1,3,1))
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 1.5,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 3,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 10,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 10, number.cex = 2,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 1, number.cex = 1.5,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
plsFit$finalModel$loadings
plsFit$finalModel$loadings[1]
plsFit$finalModel$loadings[,1]
nrow(plsFit$finalModel$loadings[,1])
length(plsFit$finalModel$loadings[,1])
m = as.matrix(plsFit$finalModel$loadings[,1])
View(m)
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
#Set number of components to be used
ncomp = 24
#Partition Data
accuracy <- c()
kappa <- c()
k.fit <- matrix(nrow = ncomp)
cm.list <- list()
loadings.c1 <- matrix(nrow = 201)
loadings.c2 <- matrix(nrow = 201)
loadings.c3 <- matrix(nrow = 201)
for(i in 1:100){
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3)
plsFit <- train(
Species_ID ~ .,
data = training,
maxit = 10000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#objects for determining n components
k = assign(paste0('k', i), as.matrix(plsFit$results$Kappa))
k.fit <- cbind(k.fit, get('k'))
#loadings
c1 = assign(paste0('c1',i), as.matrix(plsFit$finalModel$loadings[,1]))
loadings.c1 <- cbind(loadings.c1, get('c1'))
c2 = assign(paste0('c2',i), as.matrix(plsFit$finalModel$loadings[,2]))
loadings.c2 <- cbind(loadings.c2, get('c2'))
c3 = assign(paste0('c3',i), as.matrix(plsFit$finalModel$loadings[,3]))
loadings.c3 <- cbind(loadings.c3, get('c3'))
#test model
plsClasses <- predict(plsFit, newdata = testing)
#objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing$Species_ID))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
View(loadings.c1)
comp_to_spec = function(x){
t.comp = t(x)
colnames(t.comp) <- seq(400,2400, by = 10)
s.comp = as.spectra(t.comp)
}
l1 = comp_to_spec(loadings.c1[,-1])
library(spectrolab)
comp_to_spec = function(x){
t.comp = t(x)
colnames(t.comp) <- seq(400,2400, by = 10)
s.comp = as.spectra(t.comp)
}
l1 = comp_to_spec(loadings.c1[,-1])
?as_spectra
comp_to_spec = function(x){
t.comp = t(x)
colnames(t.comp) <- seq(400,2400, by = 10)
s.comp = as_spectra(t.comp)
}
l1 = comp_to_spec(loadings.c1[,-1])
component1 = comp_to_spec(loadings.c1)
component2 = comp_to_spec(loadings.c2)
component3 = comp_to_spec(loadings.c3)
par(mar = c(5,4,1,1), oma = c(1,1,1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2"),
col=c(rgb(1,0,0,1), rgb(0,0,1,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
plsFit$finalModel$Xtotvar
explvar(plsFit)
cm.total = Reduce('+', cm.list)/100
cm.total = t(cm.total)
cm.total = cm.total/rowSums(cm.total)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) <- c('DA', 'DO', 'DX')
colnames(cm.total) <- c('DA', 'DO', 'DX')
write.csv(cm.total, "Figures/cm_final/cm_Species_ID_mean.csv")
cols = colorRampPalette(c('#f5f5f5', '#b35806'))
par(mar = c(1,2,4,1), oma = c(1,1,3,1))
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 1, number.cex = 1.5,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
library(polycor)
library(corrplot)
library(plyr)
library(vegan)
library(ggplot2)
library(ggpubr)
#Morphology analysis
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
leaf = read.csv('morphology.csv', stringsAsFactors = F)
values = c("parent",'parent','hybrid')
leaf$Species = as.factor(leaf$Species)
leaf$taxa <- values[leaf$Species]
traits = leaf[, -c(1,2,3,9,10,11)]
parent = traits[!traits$Species == 'DX',]
parent = parent[,-5]
hyb = traits[traits$Species == 'DX',]
hyb = hyb[,-5]
#parent trait correlations
p.c = cor(parent, method = 'pearson')
colnames(p.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
rownames(p.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
#hybrid trait correlations
hyb.c = cor(hyb, method = 'pearson')
colnames(hyb.c) <-c('Glands', 'Scales', 'Length', 'Tomentum')
rownames(hyb.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5)
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.15)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5)
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.15)
cols = colorRampPalette(c('#003c30','#543005'))
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.15)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.15)
cols = colorRampPalette(c('#003c30','#01665e','#35978f','#80cdc1','#c7eae5',
'#f5f5f5','#f6e8c3','#dfc27d','#bf812d','#8c510a',
'#543005'))
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.15)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.15)
#corplots
cols = colorRampPalette(c('#01665e','#35978f','#80cdc1','#c7eae5',
'#f5f5f5','#f6e8c3','#dfc27d','#bf812d','#8c510a'))
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.15)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.15)
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.5)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.5)
################################################################################
library(spectrolab)
library(caret)
library(mlbench)
library(corrplot)
library(matrixStats)
library(naniar)
library(rlist)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
cm.total = read.csv("Figures/cm_final/cm_sp_loc_mean.csv", stringsAsFactors = T)
cm.total = as.matrix(cm.total)
rownames(cm.total) <- cm.total[,1]
cm.total = cm.total[,-1]
cm.total = mapply(cm.total, FUN = as.numeric)
cm.total = matrix(data = cm.total, ncol = 12, nrow = 12)
rownames(cm.total) <- c('ES', 'TM', 'WDB', 'BG', 'ES', 'TM', 'MD', 'WDA', 'WDB', 'ES', 'TM', 'WDB')
colnames(cm.total) <- c('ES', 'TM', 'WDB', 'BG', 'ES', 'TM', 'MD', 'WDA', 'WDB', 'ES', 'TM', 'WDB')
cols = colorRampPalette(c('#f5f5f5', '#b35806'))
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 1, number.cex = 1.5,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
par(mar = c(1,2,4,1), oma = c(1,1,3,1))
corrplot(cm.total, is.corr = T, method = 'square', col = cols(10), addCoef.col = '#542788',
tl.srt = 0, tl.offset = 1, number.digits = 2, tl.cex = 1.2,
cl.cex = 1, number.cex = 1.5,
tl.col = 'black', cl.pos = 'n', na.label = 'square',
na.label.col = 'white', addgrid.col = 'grey')
.8*.8
library(polycor)
library(corrplot)
library(plyr)
library(vegan)
library(ggplot2)
library(ggpubr)
#Morphology analysis
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
leaf = read.csv('morphology.csv', stringsAsFactors = F)
values = c("parent",'parent','hybrid')
leaf$Species = as.factor(leaf$Species)
leaf$taxa <- values[leaf$Species]
traits = leaf[, -c(1,2,3,9,10,11)]
parent = traits[!traits$Species == 'DX',]
parent = parent[,-5]
hyb = traits[traits$Species == 'DX',]
hyb = hyb[,-5]
#parent trait correlations
p.c = cor(parent, method = 'pearson')
colnames(p.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
rownames(p.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
#hybrid trait correlations
hyb.c = cor(hyb, method = 'pearson')
colnames(hyb.c) <-c('Glands', 'Scales', 'Length', 'Tomentum')
rownames(hyb.c) <- c('Glands', 'Scales', 'Length', 'Tomentum')
cols = colorRampPalette(c('#01665e','#35978f','#80cdc1','#c7eae5',
'#f5f5f5','#f6e8c3','#dfc27d','#bf812d','#8c510a'))
par(mfrow = c(1,2))
corrplot(p.c, type = "lower", diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Parent', side = 2, line = -2, at = 2, cex = 1.5)
corrplot(hyb.c, type = 'lower', diag = F, cl.cex = 1, addCoef.col = 'black',
tl.col = 'black', cl.length = 5, col = cols(10))
mtext('Hybrid', side = 2, line = -2, at = 2, cex = 1.5)
View(leaf)
library(spectrolab)
library(caret)
library(mlbench)
library(corrplot)
library(matrixStats)
library(naniar)
library(rlist)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Fit PLS_DA model all dry
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Location == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Location)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Location"] <- "Location"
#Set number of components to be used
ncomp = 32
#Partition Data
accuracy <- c()
kappa <- c()
k.fit <- matrix(nrow = ncomp)
cm.list <- list()
loadings.c1 <- matrix(nrow = 201)
loadings.c2 <- matrix(nrow = 201)
loadings.c3 <- matrix(nrow = 201)
for(i in 1:100){
inTrain <- caret::createDataPartition(
y = spec_df$Location,
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 3)
plsFit <- train(
Location ~ .,
data = training,
maxit = 10000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#objects for determining n components
k = assign(paste0('k', i), as.matrix(plsFit$results$Kappa))
k.fit <- cbind(k.fit, get('k'))
#loadings
c1 = assign(paste0('c1',i), as.matrix(plsFit$finalModel$loadings[,1]))
loadings.c1 <- cbind(loadings.c1, get('c1'))
c2 = assign(paste0('c2',i), as.matrix(plsFit$finalModel$loadings[,2]))
loadings.c2 <- cbind(loadings.c2, get('c2'))
c3 = assign(paste0('c3',i), as.matrix(plsFit$finalModel$loadings[,3]))
loadings.c3 <- cbind(loadings.c3, get('c3'))
#test model
plsClasses <- predict(plsFit, newdata = testing)
#objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing$Location))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
comp_to_spec = function(x){
t.comp = t(x)
colnames(t.comp) <- seq(400,2400, by = 10)
s.comp = as_spectra(t.comp)
}
#plot loadings
component1 = comp_to_spec(loadings.c1)
component2 = comp_to_spec(loadings.c2)
component3 = comp_to_spec(loadings.c3)
par(mar = c(5,4,1,1), oma = c(1,1,1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.15, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
par(mar = c(5,4,1,1), oma = c(1,1,1,1), mfrow = c(1,1))
plot(mean(component1), lwd = 2, lty = 1, col = rgb(1,0,0,1),
cex.lab = 1.5, ylim = c(-.2, .15), ylab = "Loading Values",
xlab = "Wavelength (nm)")
plot_quantile(component1, total_prob = 0.95, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(component1, regions = default_spec_regions(), add = TRUE)
plot(mean(component2), lwd = 1.5, lty = 1, col = rgb(0,0,1,1), add = TRUE)
plot_quantile(component2, total_prob = 0.95, col = rgb(0, 0, 1, 0.25), border = FALSE, add = TRUE)
abline(h = 0, lty = 2, lwd = 1.5)
legend('bottomright',inset = .02, legend=c("Component 1", "Component 2", 'Component 3'),
col=c(rgb(1,0,0,1), rgb(0,0,1,1), rgb(0,1,0,1)), lty=1, cex=0.8, bg ='white')
plot(mean(component3), lwd = 1.5, lty = 1, col = "darkgreen", add = TRUE)
plot_quantile(component3, total_prob = 0.95, col = rgb(0, .5, 0, 0.25), border = FALSE, add = TRUE)
plsFit$finalModel$scores
plsFit$finalModel$coefficients
plsFit$finalModel$projection
plsFit$finalModel$fitted.values
plsFit$finalModel$model$x
plsFit$finalModel$tuneValue
plsFit$finalModel$residuals
