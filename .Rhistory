pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
pop.cm = confusionMatrix(pop.t)
pop.k = pop.cm$overall[2]
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
loc.cm = confusionMatrix(loc.t)
loc.k = loc.cm$overall[2]
#species+location
pam12 = pam(prox, 12)
pred.sploc = cbind(pam12$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
sploc.k = sploc.cm$overall[2]
sp.k
pop.k
loc.k
sploc.k
#species+location
pam12 = pam(prox, 12)
pred.sploc = cbind(pam12$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.t
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
sploc.k = sploc.cm$overall[2]
sploc.k
sp.k
pop.k
loc.k
sploc.k
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
library(cluster)
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("clean_all.rds")
spec_all = readRDS("clean_all.rds")
#add new population delineations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
#remove any NaN values
##Note: this removes hybrids
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm to reduce redundant data
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
#add important classes
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
#model
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
prox = rf$proximity
#species
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
sp.cm = confusionMatrix(sp.t)
saveRDS(sp.cm, "rf_confusion_matrix_output/species_cm.rds")
sp.k = sp.cm$overall[2]
#population
pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
pop.cm = confusionMatrix(pop.t)
saveRDS(pop.cm, "rf_confusion_matrix_output/pop_cm.rds")
pop.k = pop.cm$overall[2]
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
loc.cm = confusionMatrix(loc.t)
saveRDS(loc.cm, "rf_confusion_matrix_output/location_cm.rds")
loc.k = loc.cm$overall[2]
#species+location
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sploc.cm = confusionMatrix(sploc.t)
saveRDS(sploc.cm, "rf_confusion_matrix_output/species_location.rds")
sploc.k = sploc.cm$overall[2]
#kappa scores
sp.k
pop.k
loc.k
sploc.k
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
library(cluster)
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("clean_all.rds")
#add new population delineations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
#remove any NaN values
##Note: this removes hybrids
spec_all = spec_all[!meta(spec_all)$GenePop_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm to reduce redundant data
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
spec_df = as.data.frame(spec_mat)
#add important classes
spec_df$Species_ID = spec_all.df$Species_ID
spec_df$Location = spec_all.df$Location
spec_df$GenePop_ID  = spec_all.df$GenePop_ID
spec_df$sp_loc = spec_all.df$sp_loc
################################################################################
#Unsupervised Random Forest
################################################################################
s.kappa <- c()
p.kappa <- c()
l.kappa <- c()
sl.kappa <- c()
for(i in 1:100){
#model
rf = randomForest(x = spec_df[,-c(202,203,204,205)], ntree= 2000, proximity = T)
#predict classes from proximity matrix extracted from model
prox = rf$proximity
#species
pam2 = pam(prox, 2)
pred.sp = cbind(pam2$clustering, spec_df$Species_ID)
sp.t = table(pred.sp[,2],pred.sp[,1])
colnames(sp.t) = rownames(sp.t)
s.cm = confusionMatrix(sp.t)
s.kap = assign(paste0("s.kap",i), s.cm$overall[2])
s.kappa <- append(s.kappa, get('s.kap'))
#population
pam6 = pam(prox, 6)
pred.pop = cbind(pam6$clustering, spec_df$GenePop_ID)
pop.t = table(pred.pop[,2],pred.pop[,1])
colnames(pop.t) = rownames(pop.t)
p.cm = confusionMatrix(pop.t)
p.kap = assign(paste0("p.kap",i), p.cm$overall[2])
p.kappa <- append(p.kappa, get('p.kap'))
#location
pam6 = pam(prox, 6)
pred.loc = cbind(pam6$clustering, spec_df$Location)
loc.t = table(pred.loc[,2],pred.loc[,1])
colnames(loc.t) = rownames(loc.t)
l.cm = confusionMatrix(loc.t)
l.kap = assign(paste0("l.kap",i), l.cm$overall[2])
l.kappa <- append(l.kappa, get('l.kap'))
#species+location
pam9 = pam(prox, 9)
pred.sploc = cbind(pam9$clustering, spec_df$sp_loc)
sploc.t = table(pred.sploc[,2],pred.sploc[,1])
colnames(sploc.t) = rownames(sploc.t)
sl.cm = confusionMatrix(sploc.t)
sl.kap = assign(paste0("sl.kap",i), sl.cm$overall[2])
sl.kappa <- append(sl.kappa, get('sl.kap'))
}
df = data.frame(row.names = c("Species", "Population", "Location", "Species+Loc"))
s.mean = mean(s.kappa)
p.mean = mean(p.kappa)
l.mean = mean(l.kappa)
sl.mean = mean(sl.kappa)
k.mean = c(s.mean, p.mean, l.mean, sl.mean)
df = cbind(df, k.means)
df = cbind(df, k.mean)
s.sd = sd(s.kappa)
p.sd = sd(p.kappa)
l.sd = sd(l.kappa)
sl.sd = sd(sl.kappa)
k.sd = c(s.sd, p.sd, l.sd, sl.sd)
df = cbind(df, k.sd)
colnames(df) = c("Kappa Mean", "Kappa SD")
view(df)
df
saveRDS(df, "rf_confusion_matrix_ouput/kappa_stats.rds")
write.csv(df, file="rf_confusion_matrix_output/kappa_stats.csv")
?pam
library(spectrolab)
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
saveRDS(spec_all, file = "C:/Users/istas/OneDrive/Documents/GitHub/Dryas2/Data/clean_all.rds")
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
saveRDS(spec_all, file = "C:/Users/istas/OneDrive/Documents/GitHub/Dryas2/Data/clean_all.rds")
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#Code for new populations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('metadata_2.csv', stringsAsFactors = F)
df = meta(s.m)
write.csv(df, "C:/Users/istas/OneDrive/Documents/GitHub/Dryas2/Data/metadata_2.csv")
setwd("~/GitHub/Dryas2")
library(spectrolab)
library(caret)
library(dplyr)
library(randomForest)
library(cluster)
setwd("~/GitHub/Dryas2")
################################################################################
#Data setup
################################################################################
#data
spec_all = readRDS("Data/clean_all.rds")
#add new population delineations
s.m = as_spectra(as.matrix(spec_all))
meta(s.m) = read.csv('Data/metadata_2.csv', stringsAsFactors = F)
spec_all = s.m
library(spectrolab)
spec = readRDS("C:/Users/istas/Downloads/clean_all.rds")
plot(spec)
spec
View(spec)
#Morphological trait analysis and plotting
################################################################################
#Set up
################################################################################
library(corrplot)
library(plyr)
library(vegan)
library(ggplot2)
library(ggpubr)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
leaf = read.csv('morphology.csv', stringsAsFactors = F)
values = c("parent",'parent','hybrid')
leaf$Species = as.factor(leaf$Species)
leaf$taxa <- values[leaf$Species]
bp = ggplot(leaf, aes(x = Species, y = Length))+ ylab('Length (mm)')+
geom_boxplot() +
ggtitle('Leaf Length')+
theme(plot.title = element_text(hjust = .5))
#Midvein total
midvein = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX')),
fill = factor(Midvein,
levels = c(0,1,2,3),
labels = c('Neither', 'Glands', 'Scales',
'Glands + Scales')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .9, end = .1) +
labs(y = "Proportion",
fill = 'Glands or Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Abaxial Midvein Morphology')+
theme(plot.title = element_text(hjust = .5))
#Midvein Glands
gland = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX')),
fill = factor(Glandular.Midvien,
levels = c(0,1),
labels = c('Absent', 'Present')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Glands',
x = 'Species') +
theme_minimal()+
ggtitle('Midvein Glandular Trichomes')+
theme(plot.title = element_text(hjust = .5))
#Midvein Scales
scale = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Rusty.Scales,
levels = c(0,1),
labels = c('Absent', 'Present')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Midvein Scales')+
theme(plot.title = element_text(hjust = .5))
#has both scales and glands
scale_gland = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Scales.and.glands,
levels = c(0,1),
labels = c('Not concurrent', 'Concurrent')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Scales and Glands',
x = 'Species') +
theme_minimal()+
ggtitle('Pressence of scales and glands')+
theme(plot.title = element_text(hjust = .5))
#tomentum
tom = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Adaxial.tomentum,
levels = c(1,2,3),
labels = c('Sparse', 'Moderate', 'Dense')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Tomentum',
x = 'Species') +
theme_minimal()+
ggtitle('Adaxial Tomentum')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, gland, scale, tom, ncol = 2, nrow = 2)
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
midvein = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Midvein,
levels = c(0,1,2,3),
labels = c('Neither', 'Glands', 'Scales',
'Glands + Scales')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .9, end = .1) +
labs(y = "Proportion",
fill = 'Glands or Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Abaxial Midvein Morphology')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
leaf = read.csv('morphology_2.csv', stringsAsFactors = F)
values = c("parent",'parent','hybrid')
leaf$Species = as.factor(leaf$Species)
leaf$taxa <- values[leaf$Species]
bp = ggplot(leaf, aes(x = Species, y = Length))+ ylab('Length (mm)')+
geom_boxplot() +
ggtitle('Leaf Length')+
theme(plot.title = element_text(hjust = .5))
#Midvein total
midvein = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Midvein,
levels = c(0,1,2,3),
labels = c('Neither', 'Glands', 'Scales',
'Glands + Scales')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .9, end = .1) +
labs(y = "Proportion",
fill = 'Glands or Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Abaxial Midvein Morphology')+
theme(plot.title = element_text(hjust = .5))
#Midvein Glands
gland = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX')),
fill = factor(Glandular.Midvien,
levels = c(0,1),
labels = c('Absent', 'Present')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Glands',
x = 'Species') +
theme_minimal()+
ggtitle('Midvein Glandular Trichomes')+
theme(plot.title = element_text(hjust = .5))
#Midvein Scales
scale = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Rusty.Scales,
levels = c(0,1),
labels = c('Absent', 'Present')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Midvein Scales')+
theme(plot.title = element_text(hjust = .5))
#has both scales and glands
scale_gland = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Scales.and.glands,
levels = c(0,1),
labels = c('Not concurrent', 'Concurrent')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Scales and Glands',
x = 'Species') +
theme_minimal()+
ggtitle('Pressence of scales and glands')+
theme(plot.title = element_text(hjust = .5))
#tomentum
tom = ggplot(leaf,
aes(x = factor(Species,
levels = c('DAK', 'DAJ', 'DX')),
fill = factor(Adaxial.tomentum,
levels = c(1,2,3),
labels = c('Sparse', 'Moderate', 'Dense')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Tomentum',
x = 'Species') +
theme_minimal()+
ggtitle('Adaxial Tomentum')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
tom = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX')),
fill = factor(Adaxial.tomentum,
levels = c(1,2,3),
labels = c('Sparse', 'Moderate', 'Dense')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Tomentum',
x = 'Species') +
theme_minimal()+
ggtitle('Adaxial Tomentum')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
tom = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX'),
labels = c('DAK', 'DAJ', 'DX')),
fill = factor(Adaxial.tomentum,
levels = c(1,2,3),
labels = c('Sparse', 'Moderate', 'Dense')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .8, end = .2) +
labs(y = "Proportion",
fill = 'Tomentum',
x = 'Species') +
theme_minimal()+
ggtitle('Adaxial Tomentum')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
midvein = ggplot(leaf,
aes(x = factor(Species,
levels = c('DA', 'DO', 'DX'),
labels = c('DAK', 'DAJ', 'DX')),
fill = factor(Midvein,
levels = c(0,1,2,3),
labels = c('Neither', 'Glands', 'Scales',
'Glands + Scales')))) +
geom_bar(position = 'fill') +
scale_y_continuous(breaks = seq(0,1,.2)) +
scale_fill_grey(start = .9, end = .1) +
labs(y = "Proportion",
fill = 'Glands or Scales',
x = 'Species') +
theme_minimal()+
ggtitle('Abaxial Midvein Morphology')+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
bp = ggplot(leaf, aes(x = Species, y = Length))+ ylab('Length (mm)')+
geom_boxplot() +
ggtitle('Leaf Length')+
scale_x_discrete(labels=c('DAK', 'DAJ', 'DX'))
theme(plot.title = element_text(hjust = .5))
bp = ggplot(leaf, aes(x = Species, y = Length))+ ylab('Length (mm)')+
geom_boxplot() +
ggtitle('Leaf Length')+
scale_x_discrete(labels=c('DAK', 'DAJ', 'DX'))+
theme(plot.title = element_text(hjust = .5))
ggarrange(bp, midvein, tom, ncol = 2, nrow = 2)
