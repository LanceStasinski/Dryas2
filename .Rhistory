library(phytools)
library(vegan)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Distance matrix
################################################################################
#spectra
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "DX",]
spec_all = normalize(spec_all)
spec.mean = aggregate(spec_all,
by = meta(spec_all)$Name,
mean, try_keep_txt(mean))
spec.mean = as.matrix(spec.mean)
#change row names
meta_new = read.csv("mean_meta_new.csv", stringsAsFactors = F)
rownames(spec.mean) <- meta_new[, "genetic_name"]
#Genetic distance matrix
tree = read.tree(file = "dryas_phylogeny.treefile")
plot(tree)
tree$tip.label
tree.dist = cophenetic(tree)
#Make sure both matrices have same sample IDs
gene.ID = colnames(tree.dist)
spec.ID = rownames(spec.mean)
remove.gene = setdiff(gene.ID, spec.ID)
remove.spec = setdiff(spec.ID, gene.ID)
tree.dist = tree.dist[!rownames(tree.dist) %in% remove.gene, ]
tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.gene]
spec.mean = spec.mean[!rownames(spec.mean) == "tmi43_DA",]
#reorder spec matrix to match order of genetic matrix
spec.mean = spec.mean[row.names(tree.dist),,drop = F]
View(spec.mean)
df = meta(spec_all)
df = df[row.names(spec.mean),,drop=F]
View(df)
df = meta(spec_all)
View(df)
View(meta_new)
bg = meta_new[meta_new$Location == "Bison Gulch",]
bg.ID = rownames(bg)
View(bg)
rownames(bg) <- bg[,"genetic_name"]
breakdown = function(site){
place = meta_new[meta_new$Location == site,]
}
breakdown = function(site){
place = meta_new[meta_new$Location == site,]
return(place)
}
bg=breakdown(site="Bison Gulch")
bg
breakdown = function(site){
place = meta_new[meta_new$Location == site,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
bg=breakdown(site="Bison Gulch")
bg
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
bg.spec = cut_spec(place = bg)
View(bg.spec)
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.g]
return(place.tree.dist)
}
bg.tree = cut_tree(bg.spec)
bg.tree
remove.g
d = setdiff(rownames(bg.spec), rownames(tree.dist))
d = setdiff(rownames(tree.dist),rownames(bg.spec))
t = tree.dist[!rownames(tree.dist) %in% d,]
t
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
bg.tree = cut_tree(bg.spec)
bg.tree
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman", permutations = 999)
return(mtest)
}
bg = mantel_by_location("Bison Gulch")
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
}
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
return(spec.dist)
}
bg = mantel_by_location("Bison Gulch")
bg
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman", permutations = 999)
return(mtest)
}
bg.dist = mantel_by_location("Bison Gulch")
bg.dist
es = mantel_by_location("Eagle Summit")
es
unique(meta_new$Location)
bg = mantel_by_location("Bison Gulch")
es = mantel_by_location("Eagle Summit")
md = mantel_by_location("Murphy Dome B")
tm = mantel_by_location("Twelve Mile")
wda = mantel_by_location("Wickersham Dome A")
wdb = mantel_by_location("Wickersham Dome B")
bg
es
md
tm
wda
wdb
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
bg = mantel_by_location("Bison Gulch")
es = mantel_by_location("Eagle Summit")
md = mantel_by_location("Murphy Dome B")
tm = mantel_by_location("Twelve Mile")
wda = mantel_by_location("Wickersham Dome A")
wdb = mantel_by_location("Wickersham Dome B")
bg
es
md
tm
wda
wdb
################################################################################
library(spectrolab)
library(caret)
library(dplyr)
library(mlbench)
library(corrplot)
library(matrixStats)
library(naniar)
library(rlist)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
#Data setup !!!!NOTE: use ctrl+f to find a replace the field to be classified!!!
################################################################################
#data
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
#remove any NaN values - mostly pertains to populations
spec_all = spec_all[!meta(spec_all)$Species_ID == "NaN",]
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
#combine relavant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df$Species_ID)
colnames(spec_df)[colnames(spec_df) == "spec_all.df$Species_ID"] <- "Species_ID"
################################################################################
#Run PLSDA
################################################################################
#Set number of components to be used
ncomp = 22
#create vectors, lists, and matrices to store metrics and loadings
accuracy <- c()
kappa <- c()
k.fit <- matrix(nrow = ncomp)
cm.list <- list()
da.vip = matrix(nrow=201)
do.vip = matrix(nrow=201)
dx.vip = matrix(nrow=201)
#start of PLSDA code
for(i in 1:100){
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df$Species_ID,
p = .8,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = 'up',
repeats = 3)
#Fit model. Note max iterations set to 10000 to allow model convergence
plsFit <- train(
Species_ID ~ .,
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#variable importance
vip = varImp(plsFit)
da = assign(paste0('da', i), vip$importance$DA)
da.vip <- cbind(da.vip, get('da'))
do = assign(paste0('do', i), vip$importance$DO)
do.vip <- cbind(do.vip, get('do'))
dx = assign(paste0('dx', i), vip$importance$DX)
dx.vip <- cbind(dx.vip, get('dx'))
#kappa objects for determining n components
k = assign(paste0('k', i), as.matrix(plsFit$results$Kappa))
k.fit <- cbind(k.fit, get('k'))
#test model using the testing data partition (30% of data)
plsClasses <- predict(plsFit, newdata = testing)
#confusion/classification matrix objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing$Species_ID))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
.2*672
.2*134
.2^134
par(mfrow = c(3,1))
plot(mean(da.vip.spec), lwd = 1.5, lty = 1, col = '#00B0F6', ylim = c(0, 100),
ylab = "Variable Importance", xlab = NA, cex.lab = 1.5)
plot_quantile(da.vip.spec, total_prob = 0.95, col = rgb(0, 0.69, 0.965, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
plot(mean(do.vip.spec), lwd = 2, lty = 1, col = '#F8766D',
cex.lab = 1.5, ylim = c(0, 100), ylab = "Variable Importance",
xlab = NA)
plot_quantile(do.vip.spec, total_prob = 0.95, col = rgb(0.972549,0.4627451,0.427451, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
plot(mean(dx.vip.spec), lwd = 1.5, lty = 1, col = rgb(0,0,0,1), ylim = c(0, 100),
ylab = "Variable Importance", xlab = 'Wavelength (nm)', cex.lab = 1.5)
plot_quantile(dx.vip.spec, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
vip_to_spec = function(x){
t.vip = t(x)
colnames(t.vip) <- seq(400,2400, by = 10)
s.vip = as_spectra(t.vip)
}
do.vip = do.vip[,-1]
do.vip.spec = vip_to_spec(do.vip)
da.vip = da.vip[,-1]
da.vip.spec = vip_to_spec(da.vip)
dx.vip = dx.vip[,-1]
dx.vip.spec = vip_to_spec(dx.vip)
#plot
par(mfrow = c(3,1))
plot(mean(da.vip.spec), lwd = 1.5, lty = 1, col = '#00B0F6', ylim = c(0, 100),
ylab = "Variable Importance", xlab = NA, cex.lab = 1.5)
plot_quantile(da.vip.spec, total_prob = 0.95, col = rgb(0, 0.69, 0.965, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
plot(mean(do.vip.spec), lwd = 2, lty = 1, col = '#F8766D',
cex.lab = 1.5, ylim = c(0, 100), ylab = "Variable Importance",
xlab = NA)
plot_quantile(do.vip.spec, total_prob = 0.95, col = rgb(0.972549,0.4627451,0.427451, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
plot(mean(dx.vip.spec), lwd = 1.5, lty = 1, col = rgb(0,0,0,1), ylim = c(0, 100),
ylab = "Variable Importance", xlab = 'Wavelength (nm)', cex.lab = 1.5)
plot_quantile(dx.vip.spec, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
abline(v = 1450, lty = 2, lwd = 1.5)
abline(v = 1940, lty = 2, lwd = 1.5)
library(spectrolab)
library(ape)
library(phytools)
library(vegan)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Distance matrix
################################################################################
#spectra
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "DX",]
spec_all = normalize(spec_all)
spec.mean = aggregate(spec_all,
by = meta(spec_all)$Name,
mean, try_keep_txt(mean))
spec.mean = as.matrix(spec.mean)
#change row names
meta_new = read.csv("mean_meta_new.csv", stringsAsFactors = F)
rownames(spec.mean) <- meta_new[, "genetic_name"]
#Genetic distance matrix
tree = read.tree(file = "dryas_phylogeny.treefile")
tree.dist = cophenetic(tree)
#Make sure both matrices have same sample IDs
gene.ID = colnames(tree.dist)
spec.ID = rownames(spec.mean)
remove.gene = setdiff(gene.ID, spec.ID)
remove.spec = setdiff(spec.ID, gene.ID)
tree.dist = tree.dist[!rownames(tree.dist) %in% remove.gene, ]
tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.gene]
spec.mean = spec.mean[!rownames(spec.mean) == "tmi43_DA",]
#reorder spec matrix to match order of genetic matrix
spec.mean = spec.mean[row.names(tree.dist),,drop = F]
breakdown = function(species){
place = meta_new[meta_new$Species_ID == species,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
mantel_by_species = function(species){
place = breakdown(species)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
daj = mantel_by_species("DO")
dak = mantel_by_species("DA")
daj
dak
meta_new
daj
dak
do = breakdown("DO")
View(do)
do_spec
do_spec = cut_spec(do)
View(do_spec)
do_tree = cut_tree(do_spec)
View(do_tree)
do.dist = as.dist(as.matrix(dist(do_spec, method = "manhattan",
diag = T, upper = T)))
do.tree = as.dist(do_tree)
vegan::mantel(do.dist, do.tree, method = "spearman",
permutations = 9999)
library(spectrolab)
library(ape)
library(phytools)
library(vegan)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
################################################################################
# Distance matrix
################################################################################
#spectra
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "DX",]
spec_all = normalize(spec_all)
spec.mean = aggregate(spec_all,
by = meta(spec_all)$Name,
mean, try_keep_txt(mean))
spec.mean = as.matrix(spec.mean)
#change row names
meta_new = read.csv("mean_meta_new.csv", stringsAsFactors = F)
rownames(spec.mean) <- meta_new[, "genetic_name"]
#Genetic distance matrix
tree = read.tree(file = "new_tree.tre")
tiplabels(tree)
tree.dist = cophenetic(tree)
View(tree.dist)
Make sure both matrices have same sample IDs
gene.ID = colnames(tree.dist)
spec.ID = rownames(spec.mean)
remove.gene = setdiff(gene.ID, spec.ID)
remove.spec = setdiff(spec.ID, gene.ID)
tree.dist = tree.dist[!rownames(tree.dist) %in% remove.gene, ]
tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.gene]
spec.mean = spec.mean[!rownames(spec.mean) == "tmi43_DA",]
#reorder spec matrix to match order of genetic matrix
spec.mean = spec.mean[row.names(tree.dist),,drop = F]
breakdown = function(site){
place = meta_new[meta_new$Location == site,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
mantel_by_location = function(site){
place = breakdown(site)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
bg = mantel_by_location("Bison Gulch")
es = mantel_by_location("Eagle Summit")
md = mantel_by_location("Murphy Dome B")
tm = mantel_by_location("Twelve Mile")
wda = mantel_by_location("Wickersham Dome A")
wdb = mantel_by_location("Wickersham Dome B")
bg
es
md
tm
wda
wdb
spec.dist = as.matrix(dist(spec.mean,
method = "manhattan",
diag = T, upper = T))
#Mantel test
spec.dist2 = as.dist(spec.dist)
tree.dist2 = as.dist(tree.dist)
mtest = vegan::mantel(spec.dist2, tree.dist2, method = "spearman",
permutations = 9999)
mtest
breakdown = function(species){
place = meta_new[meta_new$Species_ID == species,]
rownames(place) <- place[, "genetic_name"]
return(place)
}
cut_spec = function(place){
place.ID = rownames(place)
remove.s = setdiff(spec.ID, place.ID)
place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
return(place.spec)
}
cut_tree = function(place.spec){
s.ID = rownames(place.spec)
remove.g = setdiff(gene.ID, s.ID)
place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
return(place.tree.dist)
}
mantel_by_species = function(species){
place = breakdown(species)
place.spec = cut_spec(place)
place.tree.dist = cut_tree(place.spec)
spec.dist = as.matrix(dist(place.spec, method = "manhattan",
diag = T, upper = T))
dist.s = as.dist(spec.dist)
dist.t = as.dist(place.tree.dist)
mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
permutations = 9999)
return(mtest)
}
daj = mantel_by_species("DO")
dak = mantel_by_species("DA")
daj
dak
