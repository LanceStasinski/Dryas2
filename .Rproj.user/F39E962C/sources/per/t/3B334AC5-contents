################################################################################
#Set up
################################################################################

library(tidyverse)
library(caret)
library(pls)
library(spectrolab)
library(matrixStats)


setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")
spectra= readRDS("Clean-up/Clean_spectra/clean_all.rds")

spectra = spectra[!meta(spectra)$DA == "NaN",]

es = spectra[meta(spectra)$Location == "Eagle Summit",]
tm = spectra[meta(spectra)$Location == "Twelve Mile",]
wdb = spectra[meta(spectra)$Location == "Wickersham Dome B",]
spectra = Reduce(spectrolab::combine, list(es, tm, wdb))


spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
spec_df = cbind(spec_df, spectra.df$Location)
colnames(spec_df)[colnames(spec_df) == "spectra.df$DA"] <- "DA"
colnames(spec_df)[colnames(spec_df) == "spectra.df$Location"] <- "Location"
spec_df$Location <- as.factor(spec_df$Location)

spec_df2 = cbind(spec_df, spectra.df$Species_ID)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Species_ID"] <- "Species_ID"
spec_df2 = cbind(spec_df2, spectra.df$Name)
colnames(spec_df2)[colnames(spec_df2) == "spectra.df$Name"] <- 'Name'


################################################################################
#Training and testing sets - all
################################################################################
for( i in 1:10){
set.seed(i)
training.samples <- 
  createDataPartition(spec_df$DA, p = 0.8, list = FALSE)

train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]



plsFit <- train(
  DA~., data = train.data, method = "pls",
  scale = TRUE,
  trControl = trainControl("cv", number = 30),
  tuneLength = 32
)

assign(paste0('plsFit', i), plsFit)

# Make predictions
predictions <- plsFit %>% predict(test.data)
# Model performance metrics
  rmse = caret::RMSE(predictions, test.data[,"DA"])
  assign(paste0('rmse', i), rmse)
  Rsquare = caret::R2(predictions, test.data[,"DA"])
  assign(paste0('Rsquare', i), Rsquare)
}


################################################################################
#Calculate components
################################################################################
er1 = as.matrix(plsFit1$results$RMSE)
er2 = as.matrix(plsFit2$results$RMSE)
er3 = as.matrix(plsFit3$results$RMSE)
er4 = as.matrix(plsFit4$results$RMSE)
er5 = as.matrix(plsFit5$results$RMSE)
er6 = as.matrix(plsFit6$results$RMSE)
er7 = as.matrix(plsFit7$results$RMSE)
er8 = as.matrix(plsFit8$results$RMSE)
er9 = as.matrix(plsFit9$results$RMSE)
er10 = as.matrix(plsFit10$results$RMSE)
er.total = Reduce(cbind, list(er1,er2,er3,er4,er5,er6,er7,er8,er9,er10))

er.avg = as.matrix(rowMeans(er.total))
er.sd = as.matrix(rowSds(er.total))
er.lower = er.avg - er.sd
er.higher = er.avg + er.sd


dev.new(width = 6, height = 6, unit = 'in')
plot(er.avg, type = 'p', pch = 16, cex = .75, ylab = 'RMSE', xlab = 'Component', 
     xlim = c(0,40), main = 'RMSE vs Component')
lines(er.lower, lty = 2, col = 'red')
lines(er.higher, lty = 2, col = 'red')
abline(v = 14, col = 'blue')
legend('topright', legend = c('Mean', 'Standard deviation', 'Best component'), 
       pch = c(16, NA, NA), lty = c(NA, 2, 1), col = c('black', 'red', 'blue'),
       bg = 'white')
################################################################################
#Calculate error
################################################################################
rmse = c(rmse1, rmse2, rmse3, rmse4, rmse5, rmse6, rmse7, rmse8, rmse9, rmse10 )
avg.rmse = mean(rmse)
sd.rmse = sd(rmse)
avg.rmse
sd.rmse 
r2 = c(Rsquare1, Rsquare2, Rsquare3, Rsquare4, Rsquare5, Rsquare6, Rsquare7,
       Rsquare8, Rsquare9, Rsquare10)
avg.r2 = mean(r2)
sd.r2 = sd(r2)
avg.r2
sd.r2


################################################################################
#Plot
################################################################################


set.seed(2)
training.samples <- 
  createDataPartition(spec_df$DA, p = 0.8, list = FALSE)

train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]
train.plot <-spec_df2[training.samples, ]
test.plot <- spec_df2[-training.samples, ]
test.plot$color = "black"
test.plot$color[test.plot$Species_ID == "DO"]="red"
test.plot$color[test.plot$Species_ID == "DA"]="blue"


plsFit <- train(
  DA~., data = train.data, method = "pls",
  scale = TRUE,
  trControl = trainControl("cv", number = 30),
  tuneLength = 32
)


# Make predictions
predictions <- plsFit %>% predict(test.data)

rmse = caret::RMSE(predictions, test.data[,"DA"])
Rsquare = caret::R2(predictions, test.data[,"DA"])
rmse
Rsquare


dev.new(width = 6, height = 6, unit = 'in')
par(mfrow = c(1,1))
plot(test.plot$DA, predictions, cex.lab = 1.5, xlab = "Actual DA ancestry", 
     ylab = "Predicted DA ancestry", 
     xlim = c(-.3,1.3), ylim = c(-.3, 1.3))
lines(x = c(-2, 2), y = c(-2, 2))
points(test.plot$DA, predictions, col = test.plot$color, pch = 16)
legend("bottomright", inset = 0.01,
       legend=c("D. octopetala", "Hybrid", "D. alaskensis", "1:1 line"), 
       text.font = c(3,1,3,1),
       col=c("red", "black", "blue", "black"), pch = c(16,16,16,NA),
       lty = c(NA,NA,NA,1))


################################################################################
#Extra
################################################################################



# Plot model RMSE vs different values of components
plot(model)
# Print the best tuning parameter ncomp that
# minimize the cross-validation error, RMSE
model$bestTune

summary(model$finalModel)
