#Compare spectral distance to phylogenetic distance
################################################################################
#Set up
################################################################################

library(spectrolab)
library(ape)
library(phytools)
library(vegan)
setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")

################################################################################
# Distance matrix
################################################################################
#spectra
spec_all = readRDS("Clean-up/Clean_spectra/clean_all.rds")
spec_all = spec_all[!meta(spec_all)$Species_ID == "DX",]
spec_all = normalize(spec_all)
spec.mean = aggregate(spec_all,
                      by = meta(spec_all)$Name, 
                      mean, try_keep_txt(mean))

spec.mean = as.matrix(spec.mean)

#change row names
meta_new = read.csv("mean_meta_new.csv", stringsAsFactors = F)
rownames(spec.mean) <- meta_new[, "genetic_name"]


#Genetic distance matrix
tree = read.tree(file = "new_tree.tre")
tree.dist = cophenetic(tree)

#Make sure both matrices have same sample IDs
gene.ID = colnames(tree.dist)
spec.ID = rownames(spec.mean)

remove.gene = setdiff(gene.ID, spec.ID)
remove.spec = setdiff(spec.ID, gene.ID)

tree.dist = tree.dist[!rownames(tree.dist) %in% remove.gene, ]
tree.dist = tree.dist[,!colnames(tree.dist) %in% remove.gene]
spec.mean = spec.mean[!rownames(spec.mean) == "tmi43_DA",]

#reorder spec matrix to match order of genetic matrix
spec.mean = spec.mean[row.names(tree.dist),,drop = F]

#calculate spectral distance
spec.dist = as.matrix(dist(spec.mean,
                           method = "manhattan", 
                           diag = T, upper = T))
#Mantel test
spec.dist2 = as.dist(spec.dist)
tree.dist2 = as.dist(tree.dist)

mtest = vegan::mantel(spec.dist2, tree.dist2, method = "spearman", 
                      permutations = 9999)
mtest

################################################################################
#mantel by location
################################################################################
#functions
breakdown = function(site){
  place = meta_new[meta_new$Location == site,]
  rownames(place) <- place[, "genetic_name"]
  return(place)
}

cut_spec = function(place){
  place.ID = rownames(place)
  remove.s = setdiff(spec.ID, place.ID)
  place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
  return(place.spec)
}

cut_tree = function(place.spec){
  s.ID = rownames(place.spec)
  remove.g = setdiff(gene.ID, s.ID)
  place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
  place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
  return(place.tree.dist)
}

mantel_by_location = function(site){
  place = breakdown(site)
  place.spec = cut_spec(place)
  place.tree.dist = cut_tree(place.spec)
  spec.dist = as.matrix(dist(place.spec, method = "manhattan",
                             diag = T, upper = T))
  dist.s = as.dist(spec.dist)
  dist.t = as.dist(place.tree.dist)
  mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
                        permutations = 9999)
  return(mtest)
}

bg = mantel_by_location("Bison Gulch")
es = mantel_by_location("Eagle Summit")
md = mantel_by_location("Murphy Dome B")
tm = mantel_by_location("Twelve Mile")
wda = mantel_by_location("Wickersham Dome A")
wdb = mantel_by_location("Wickersham Dome B")

bg
es
md
tm
wda
wdb

################################################################################
#mantel by species
################################################################################
#functions
breakdown = function(species){
  place = meta_new[meta_new$Species_ID == species,]
  rownames(place) <- place[, "genetic_name"]
  return(place)
}

cut_spec = function(place){
  place.ID = rownames(place)
  remove.s = setdiff(spec.ID, place.ID)
  place.spec = spec.mean[!rownames(spec.mean) %in% remove.s,]
  return(place.spec)
}

cut_tree = function(place.spec){
  s.ID = rownames(place.spec)
  remove.g = setdiff(gene.ID, s.ID)
  place.tree.dist = tree.dist[!rownames(tree.dist) %in% remove.g, ]
  place.tree.dist = place.tree.dist[,!colnames(place.tree.dist) %in% remove.g]
  return(place.tree.dist)
}

mantel_by_species = function(species){
  place = breakdown(species)
  place.spec = cut_spec(place)
  place.tree.dist = cut_tree(place.spec)
  spec.dist = as.matrix(dist(place.spec, method = "manhattan",
                             diag = T, upper = T))
  dist.s = as.dist(spec.dist)
  dist.t = as.dist(place.tree.dist)
  mtest = vegan::mantel(dist.s, dist.t, method = "spearman",
                        permutations = 9999)
  return(mtest)
}

daj = mantel_by_species("DO")
dak = mantel_by_species("DA")
daj
dak

################################################################################
#plot spectral distance vs genetic distance
################################################################################
library(hexbin)
library(grid)

bin = hexbin(spec.dist2, tree.dist2, xbins = 50)
plot(bin, main = "Genetic distance versus spectral distance",
     xlab = "",
     ylab = "", colramp=BTY)
grid.text("log10(Spectral distance)", .45, .07, gp=gpar(fontsize=16))
grid.text("Genetic distance", .015, .5, rot=90, gp=gpar(fontsize=16))

################################################################################
#heirarchical clustering - not used in paper
################################################################################
library(fpc)
library(cluster)

#spectra
pam = pamk(spec.dist)
pam #2 clusters recommended

fit = hclust(spec.dist2, method = 'ward.D2')
fit.d = as.dendrogram(fit)
plot(fit.d, type = "rectangle", ylab = "Height")
plot(fit, hang = -1, cex = .5)


colors = c("red", "blue")
clus2 = cutree(fit, 2)
plot(as.phylo(fit), type = "fan", tip.color = colors[clus2],
     label.offset = .1, cex = 0.7)

#genetic
pamg = pamk(tree.dist)
pamg

fit.g = hclust(tree.dist2, method ='ward.D2')
fit.g2 = as.dendrogram(fit.g)

clus.g = cutree(fit.g, 2)
plot(as.phylo(fit.g), type = 'fan', tip.color = colors[clus.g],
     label.offset =0, cex = .7)

groups = cutree(fit, k=2)
rect.hclust(fit, k=5, border = 'red', hang)

fitk = kmeans(spec.dist, 4)

clusplot(spec.dist, fitk$cluster, color=TRUE, shade=TRUE,
         labels=2, lines=0)



