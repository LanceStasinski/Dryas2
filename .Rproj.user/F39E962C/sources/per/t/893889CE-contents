library(caret)
library(plsRbeta)

setwd("C:/Users/istas/OneDrive/Documents/Dryas Research/Dryas 2.0")

################################################################################
#Set up
################################################################################
#spectra
spec_all= readRDS("Clean-up/Clean_spectra/clean_all.rds")

#remove NAs and resample to every ten nm
spec_all = spec_all[!meta(spec_all)$DA == "NaN",]
spectra = resample(spec_all, seq(400, 2400, by = 10))

#prepare data for PLS
spectra.df = as.data.frame(spectra)
spectra.m = as.matrix(spectra)
spec_df = as.data.frame(spectra.m)
spec_df = cbind(spec_df, spectra.df$DA)
colnames(spec_df)[colnames(spec_df) == 'spectra.df$DA'] <- 'DA'

training.samples <- 
  createDataPartition(spec_df$DA, p = 0.7, list = FALSE)

train.data  <- spec_df[training.samples, ]
test.data <- spec_df[-training.samples, ]

m = PLS_beta_formula(DA~., data = train.data, nt = 3,
                     modele = 'pls-beta')

p <- m$FinalModel %>% predict(test.data)

m2 = PLS_beta_kfoldcv_formula(DA~., data = spec_df, nt = 3,
                            modele = 'pls-beta', K = 2, NK = 2,
                            verbose = T, random = T, keepcoeffs = T, keepdataY = T)
p2 = m2$coeffs_kfolds %>% predict(test.data)
coefs.plsRbeta(m)

plsFit <- train(
  DA~., data = train.data, method = "plsRglm",
  scale = TRUE,
  trControl = trainControl("repeatedcv", number = 10, repeats = 3),
  tuneLength = 23
)