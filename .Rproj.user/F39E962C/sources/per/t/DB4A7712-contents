library(spectrolab)
library(mixOmics)

spec_all1 = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_all = spec_all1[!meta(spec_all1)$Species_ID == "DX",]
names(spec_all) = meta(spec_all)$Species_ID
spec_all.m = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)

#Resample by every 10 nm
spec_small = resample(spec_all, seq(400, 2400, by = 10))
spec_mat_s = as.matrix(spec_small)
spec_mat = spec_mat_s
resp = rownames(spec_mat)
rownames(spec_mat) = seq(nrow(spec_mat))

#determine number of components to use
plsda.fit = plsda(spec_mat, resp, ncomp = 30)
perf.plsda = perf(plsda.fit, validation = "Mfold", folds = 5,
                  progressBar = TRUE, auc = TRUE, nrepeat = 50)

perf.plot_species.nohyb = plot(perf.plsda, col = color.mixo(1:3), sd = TRUE, 
                               legend.position = "horizontal")
par(mfrow = c(1,1))
perf.plot_species.nohyb
saveRDS(perf.plot_species.nohyb, "Figures/perf plots/perf.plot_species.nohyb.rds")
###ncomp = 16
plotIndiv(plsda.fit, title = "", comp = c(1,2,5), legend = TRUE, 
          style = "3d", ind.names = F, ellipse = TRUE)

#Run PLSDA
set.seed(25) 
samp <- sample(1:3, nrow(spec_mat), replace = TRUE) 
# 1/3 of the data will compose the test set
test <- which(samp == 1) 
# rest will compose the training set
train <- setdiff(1:nrow(spec_mat), test)

## For PLS-DA, train the model
plsda.train <- plsda(spec_mat[train, ], resp[train], ncomp = 30)
# then predict
test.predict <- predict(plsda.train, spec_mat[test, ], dist = "max.dist")
# store prediction for the 4th component
prediction <- test.predict$class$max.dist[,21] 
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp[test], predicted = prediction)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)


#plot
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1, 
                show.values = TRUE,
                axes = FALSE,
                xlab = "",
                ylab = "",
                vcex = 2,
                vcol = "black",
                extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
     labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
     labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)

################################################################################
#ES data
################################################################################

spec_dry = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_es_d = spec_dry[meta(spec_dry)$Location == "Eagle Summit",]
spec_es_d_nohyb = spec_es_d[!meta(spec_es_d)$Species == "hybrid",]
spec_es = spec_es_d_nohyb
names(spec_es) = meta(spec_es)$Species_ID
spec_es.m = as.matrix(spec_es)
spec_es.df = as.data.frame(spec_es)

#Resample by every 10 nm
spec_small_es = resample(spec_es, seq(400, 2400, by = 10))
spec_mat_es = as.matrix(spec_small_es)

resp_es = rownames(spec_mat_es)
rownames(spec_mat_es) = seq(nrow(spec_mat_es))

test.predict_es <- predict(plsda.train, spec_mat_es, dist = "max.dist")
# store prediction for the 4th component
prediction_es <- test.predict_es$class$max.dist[,16] 
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp_es, predicted = prediction_es)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
#plot
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1, 
                show.values = TRUE,
                axes = FALSE,
                xlab = "",
                ylab = "",
                vcex = 2,
                vcol = "black",
                extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
     labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
     labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)

################################################################################
#WDB data
################################################################################

spec_dry = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_wdb_d = spec_dry[meta(spec_dry)$Location == "Wickersham Dome B",]
spec_wdb_d_nohyb = spec_wdb_d[!meta(spec_wdb_d)$Species == "hybrid",]
spec_wdb = spec_wdb_d_nohyb
names(spec_wdb) = meta(spec_wdb)$Species_ID
spec_wdb.m = as.matrix(spec_wdb)
spec_wdb.df = as.data.frame(spec_wdb)

#Resample by every 10 nm
spec_small_wdb = resample(spec_wdb, seq(400, 2400, by = 10))
spec_mat_wdb = as.matrix(spec_small_wdb)

resp_wdb = rownames(spec_mat_wdb)
rownames(spec_mat_wdb) = seq(nrow(spec_mat_wdb))

test.predict_wdb <- predict(plsda.train, spec_mat_wdb, dist = "max.dist")
# store prediction for the 4th component
prediction_wdb <- test.predict_wdb$class$max.dist[,13] 
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp_wdb, predicted = prediction_wdb)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)


#plot
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1, 
                show.values = TRUE,
                axes = FALSE,
                xlab = "",
                ylab = "",
                vcex = 2,
                vcol = "black",
                extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
     labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
     labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)

################################################################################
#TM data
################################################################################

spec_dry = readRDS("Clean-up/Vector_normalized/all_vn.rds")
spec_tm_d = spec_dry[meta(spec_dry)$Location == "Twelve Mile",]
spec_tm_d_nohyb = spec_tm_d[!meta(spec_tm_d)$Species == "hybrid",]
spec_tm = spec_tm_d_nohyb
names(spec_tm) = meta(spec_tm)$Species_ID
spec_tm.m = as.matrix(spec_tm)
spec_tm.df = as.data.frame(spec_tm)

#Resample by every 10 nm
spec_small_tm = resample(spec_tm, seq(400, 2400, by = 10))
spec_mat_tm = as.matrix(spec_small_tm)

resp_tm = rownames(spec_mat_tm)
rownames(spec_mat_tm) = seq(nrow(spec_mat_tm))

test.predict_tm <- predict(plsda.train, spec_mat_tm, dist = "max.dist")
# store prediction for the 4th component
prediction_tm <- test.predict_tm$class$max.dist[,15] 
# calculate the error rate of the model
confusion.mat = get.confusion_matrix(truth = resp_tm, predicted = prediction_tm)
cm1 = as.data.frame(confusion.mat)
get.BER(confusion.mat)
#plot
par(mar = c(2, 4, 3, 4), oma = c(2, 4, 3, 2))
color2D.matplot(cm1, 
                show.values = TRUE,
                axes = FALSE,
                xlab = "",
                ylab = "",
                vcex = 2,
                vcol = "black",
                extremes = c("white", "deepskyblue3"))
axis(3, at = seq_len(ncol(cm1)) - 0.5,
     labels = names(cm1), tick = FALSE, cex.axis = 1)
axis(2, at = seq_len(nrow(cm1)) -0.5,
     labels = rev(rownames(cm1)), tick = FALSE, las = 1, cex.axis = 1)